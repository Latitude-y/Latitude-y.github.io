<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shiro整合JWT——01</title>
      <link href="/2024/04/19/Shiro+JWT01/"/>
      <url>/2024/04/19/Shiro+JWT01/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="什么是Shiro？"><a href="#什么是Shiro？" class="headerlink" title="什么是Shiro？"></a>什么是Shiro？</h2><blockquote><ol><li><p>定义：”Apache Shiro是一个强大且易用的Java安全框架，执行身份验证、授权、密码和会话管理”。</p></li><li><p>核心组件：</p><ul><li><p>Subject：可以理解为”当前操作用户”</p></li><li><p>SecurityManager：Shiro框架的核心，执行”<strong>认证（Authentication）</strong>“、”<strong>授权（Authorization）</strong>“、”<strong>会话管理（Session Management）</strong>“、”<strong>加密（Encryption）</strong>“等操作</p></li><li><p>Realm：在定义的Realm中执行用户登录验证及权限验证</p></li></ul></li></ol></blockquote><blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>.ini文件</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">Jay</span>=Mojito,role1,role2</span><br><span class="line"><span class="attr">Ashin</span>=mayday</span><br><span class="line"></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">role1</span>=user:insert,user:select</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p><strong>自定义的Realm</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerMD5Realm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//从系统返回的身份信息集合中获取主身份信息（用户名）</span></span><br><span class="line"><span class="comment">/*        String primaryPrincaipal = principalCollection.getPrimaryPrincipal().toString();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;用户名：&quot;+primaryPrincaipal);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户名获取当前用户的角色信息，以及权限信息</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo=<span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据库中查询角色信息赋值给权限对象</span></span><br><span class="line">        simpleAuthorizationInfo.addRole(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        simpleAuthorizationInfo.addRole(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据库中查询权限信息赋值给权限对象  资源标识符:操作:资源类型</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">&quot;user:*:01&quot;</span>);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">&quot;product:creat&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//从token中获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> authenticationToken.getPrincipal().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;principal:&quot;</span>+principal);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> authenticationToken.getCredentials().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;token:&quot;</span>+token);</span><br><span class="line">        <span class="comment">//密码加密</span></span><br><span class="line">        Md5Hash md5Hash=<span class="keyword">new</span> <span class="title class_">Md5Hash</span>(<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;qwe&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Jay&quot;</span>.equals(principal))&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 用户名</span></span><br><span class="line"><span class="comment">             * 加密后的密码</span></span><br><span class="line"><span class="comment">             * 随机盐</span></span><br><span class="line"><span class="comment">             * 当前realm的名称</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(</span><br><span class="line">                    principal,</span><br><span class="line">                    md5Hash.toString(),</span><br><span class="line">                    ByteSource.Util.bytes(<span class="string">&quot;qwe&quot;</span>),</span><br><span class="line">                    <span class="built_in">this</span>.getName()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerMD5AuthenticatorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建SecurityManager</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager=<span class="keyword">new</span> <span class="title class_">DefaultSecurityManager</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.设置自定义Realm</span></span><br><span class="line">        CustomerMD5Realm customerMD5Realm=<span class="keyword">new</span> <span class="title class_">CustomerMD5Realm</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.为realm设置凭证匹配器</span></span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher=<span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置加密算法</span></span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.设置迭代次数</span></span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.realm加载凭证匹配器</span></span><br><span class="line">        customerMD5Realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.设置自定义realm</span></span><br><span class="line">        defaultSecurityManager.setRealm(customerMD5Realm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.给全局安全工具SecurityUtils设置安全管理器</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.获取当前subject</span></span><br><span class="line">        Subject subject= SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建token</span></span><br><span class="line">        UsernamePasswordToken token=<span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;Jay&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 登录认证</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Start--------------------------&quot;</span>);</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;认证成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Ending------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        <span class="keyword">if</span>(subject.isAuthenticated())&#123;</span><br><span class="line"><span class="comment">/*            //基于角色权限控制</span></span><br><span class="line"><span class="comment">            System.out.println(subject.hasRole(&quot;super&quot;));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //基于多角色权限控制（同时具有）</span></span><br><span class="line"><span class="comment">            System.out.println(subject.hasAllRoles(Arrays.asList(&quot;admin&quot;,&quot;super&quot;)));*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//是否具有其中一个角色</span></span><br><span class="line">            <span class="type">boolean</span>[] booleans=subject.hasRoles(Arrays.asList(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;super&quot;</span>,<span class="string">&quot;user&quot;</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">boolean</span> aBoolean : booleans) &#123;</span><br><span class="line">                System.out.println(aBoolean);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;=================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//基于权限字符串的访问控制  资源标识符:操作:资源类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;权限：&quot;</span>+subject.isPermitted(<span class="string">&quot;user:update:01&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;权限：&quot;</span>+subject.isPermitted(<span class="string">&quot;product:create:02&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分别具有那些权限</span></span><br><span class="line">            <span class="type">boolean</span>[] permitted = subject.isPermitted(<span class="string">&quot;user:*:01&quot;</span>, <span class="string">&quot;order:*:10&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">boolean</span> b : permitted) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//同时具有那些权限</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">permittedAll</span> <span class="operator">=</span> subject.isPermittedAll(<span class="string">&quot;user:*:01&quot;</span>, <span class="string">&quot;product:creat:10&quot;</span>);</span><br><span class="line">            System.out.println(permittedAll);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><h2 id="什么是JWT？-JSON-Web-Token-入门教程-阮一峰的网络日志JSON-Web-Token-入门教程-阮一峰的网络日志"><a href="#什么是JWT？-JSON-Web-Token-入门教程-阮一峰的网络日志JSON-Web-Token-入门教程-阮一峰的网络日志" class="headerlink" title="[什么是JWT？](JSON Web Token 入门教程 - 阮一峰的网络日志JSON Web Token 入门教程 - 阮一峰的网络日志)"></a>[什么是JWT？](<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程 - 阮一峰的网络日志</a><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程 - 阮一峰的网络日志</a>)</h2><blockquote><ol><li><p>定义：Java web token（JWT），is an open standard used to share security information between two parties — a client and a server. Each JWT contains encoded JSON objects, including a set of claims. JWTs are signed using a cryptographic algorithm to ensure that the claims cannot be altered after the token is issued.（用于在客户端和服务器两方之间共享安全信息。每个 JWT 都包含编码的 JSON 对象，包括一组声明。 JWT 使用加密算法进行签名，以确保在令牌发布后声明无法更改。）</p></li><li><p>传统的<strong>用户认证</strong>：</p><ul><li><p>用户向服务器发送用户名和密码。</p></li><li><p>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p></li><li><p>服务器向用户返回一个 session_id，写入用户的 Cookie。</p></li><li><p>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p></li><li><p>服务器收到 session_id，找到前期保存的数据，进行用户跟踪。</p></li></ul></li><li><p>以上方法会出现的问题：<strong>跨域认证问题</strong>，即如果是服务器集群，需要session数据共享。这样会增加服务器压力，同时session数据同步需要时间成本。</p><p>因此索性在服务器端不保存session数据，将所有数据都保存在客户端，每次请求都发回服务端。</p></li><li><p>JWT具体介绍见博客，介绍的很详细，不再赘述。<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程 - 阮一峰的网络日志</a>。</p></li></ol></blockquote></blockquote><blockquote><blockquote><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">Component</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间改为从配置文件获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String accessTokenExpireTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT认证加密私钥(Base64加密)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String encryptJWTKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;accessTokenExpireTime&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessTokenExpireTime</span><span class="params">(String accessTokenExpireTime)</span> &#123;</span><br><span class="line">        JwtUtil.accessTokenExpireTime = accessTokenExpireTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;encryptJWTKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEncryptJWTKey</span><span class="params">(String encryptJWTKey)</span> &#123;</span><br><span class="line">        JwtUtil.encryptJWTKey = encryptJWTKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token是否正确</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 帐号加JWT私钥解密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> getClaim(token, Constant.ACCOUNT) + Base64ConvertUtil.decode(encryptJWTKey);</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(secret);</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">            verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;JWTToken认证解密出现UnsupportedEncodingException异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;JWTToken认证解密出现UnsupportedEncodingException异常:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得Token中的信息无需secret解密也能获得</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claim</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getClaim</span><span class="params">(String token, String claim)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">            <span class="comment">// 只能输出String类型，如果是其他类型返回null</span></span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(claim).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;解密Token中的公共信息出现JWTDecodeException异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;解密Token中的公共信息出现JWTDecodeException异常:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account 帐号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String 返回加密的Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String account, String currentTimeMillis)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 帐号加JWT私钥加密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> account + Base64ConvertUtil.decode(encryptJWTKey);</span><br><span class="line">            <span class="comment">// 此处过期时间是以毫秒为单位，所以乘以1000  此处就是设置过期时间</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + Long.parseLong(accessTokenExpireTime) * <span class="number">1000</span>);</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(secret);</span><br><span class="line">            <span class="comment">// 附带account帐号信息</span></span><br><span class="line">            <span class="keyword">return</span> JWT.create()</span><br><span class="line">                    .withClaim(<span class="string">&quot;account&quot;</span>, account)   <span class="comment">//进行声明</span></span><br><span class="line">                    .withClaim(<span class="string">&quot;currentTimeMillis&quot;</span>, currentTimeMillis)    <span class="comment">//进行声明</span></span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;JWTToken加密出现UnsupportedEncodingException异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;JWTToken加密出现UnsupportedEncodingException异常:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux部署Redis过程中踩的坑</title>
      <link href="/2024/04/19/redis%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/04/19/redis%E9%83%A8%E7%BD%B2%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="本文是作者在远程服务器安装Redis的操作步骤以及安装过程中踩到的坑，特此记录。"><a href="#本文是作者在远程服务器安装Redis的操作步骤以及安装过程中踩到的坑，特此记录。" class="headerlink" title="本文是作者在远程服务器安装Redis的操作步骤以及安装过程中踩到的坑，特此记录。"></a>本文是作者在远程服务器安装Redis的操作步骤以及安装过程中踩到的坑，特此记录。</h3><blockquote><ul><li><p>服务器操作系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/os-release</span></span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 22.04.2 LTS&quot;</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION_ID=&quot;22.04&quot;</span><br><span class="line">VERSION=&quot;22.04.2 LTS (Jammy Jellyfish)&quot;</span><br><span class="line">VERSION_CODENAME=jammy</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br></pre></td></tr></table></figure></li><li><p><a href="https://redis.io/download/">Redis版本</a>：<a href="https://redis.io/download/">Download | Redis</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli INFO server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Server</span></span><br><span class="line">redis_version:7.2.4</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><ol><li><p>下载压缩包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://github.com/redis/redis/archive/<span class="number">7.2</span>.<span class="number">4</span>.tar.gz</span><br></pre></td></tr></table></figure><p>还有一种比较笨拙的方式，自己装的时候不知道为毛没有办法下载，只能先在windows主机上下载，然后上传到Linux服务器中去：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp C:\path\to\your\file.zip username@linux_server_ip:/path/to/destination/</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="2"><li><p>解压（建议将解压后的文件放直接放<code>/usr/local/redis</code>路径中去了，别放奇奇怪怪的位置，出了错误都不知道咋排查）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zvxf</span> redis7.<span class="number">2.4</span>.tar.gzz</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="3"><li><p>此时目录位置如下：</p><p><img src="/../pictures%5Credis%E4%BD%8D%E7%BD%AE.png"></p></li></ol></blockquote><blockquote><ol start="4"><li><p>编译</p><p>需要在<code>/usr/local/redis</code>目录下执行。</p><p>如果无法执行，请务必确定服务器中安装了<strong>GCC</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="/../pictures/Redis%E7%BC%96%E8%AF%91.png"></p></li></ol></blockquote><blockquote><ol start="5"><li><p>安装</p><p>同样需要在<code>/usr/local/redis</code>目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><p><img src="/../pictures/Redis%E5%AE%89%E8%A3%85.png"></p></li></ol></blockquote><blockquote><ol start="6"><li><p>启动</p><p>去<code>/usr/local/redis/bin</code>目录下直接执行下面命令启动：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ./redis<span class="literal">-server</span></span><br></pre></td></tr></table></figure><p><img src="/../pictures/redis%E5%90%AF%E5%8A%A8.png"></p><p>可以使用以下命令看下服务是否启动：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ps</span> <span class="literal">-aux</span> | grep redis</span><br></pre></td></tr></table></figure><p><img src="/../pictures/%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B.png"></p></li></ol></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置都在<code>/usr/local/redis/redis.conf</code>文件中，使用vim文件编辑器打开。</p><blockquote><ol><li><p>将Redis前台进程变为后台守护进程：将<code>daemonize no</code>改为<code>yes</code></p></li><li><p>允许远程访问，否则只能为单机：将<code>protected-mode yes</code>改为<code>no</code></p><ul><li><p>但是不知道为毛改了后还是没生效，然后使用<code>redis-cli</code>命令进入Redis操作模式，使用下面命令进行更改：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis<span class="literal">-cli</span></span><br><span class="line">CONFIG <span class="built_in">SET</span> protected<span class="literal">-mode</span> no</span><br></pre></td></tr></table></figure><p>如果报：</p><p><img src="/../pictures/%E6%8A%A5%E5%BC%82%E5%B8%B8.png"></p><p>需要将<code>/usr/local/redis/bin/redis-cli</code>放到<code>/usr/local/bin</code>路径下。</p></li></ul></li><li><p>更改IP地址，默认为<code>bind 127.0.0.1</code>，改为<code>bind 0.0.0.0</code></p></li></ol></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro整合JWT——02</title>
      <link href="/2024/04/19/Shiro+JWT02/"/>
      <url>/2024/04/19/Shiro+JWT02/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="整合Shiro和JWT"><a href="#整合Shiro和JWT" class="headerlink" title="整合Shiro和JWT"></a>整合Shiro和JWT</h2><blockquote><h3 id="编写JWT工具类"><a href="#编写JWT工具类" class="headerlink" title="编写JWT工具类"></a>编写JWT工具类</h3><p>主要实现以下两个功能：</p><ol><li><p>生成token：<code>verify(String token)&#123;&#125;</code></p></li><li><p>验证token：<code>sign(String account, String currentTimeMillis) &#123;&#125;</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间改为从配置文件获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String accessTokenExpireTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT认证加密私钥(Base64加密)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String encryptJWTKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;accessTokenExpireTime&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessTokenExpireTime</span><span class="params">(String accessTokenExpireTime)</span> &#123;</span><br><span class="line">        JwtUtil.accessTokenExpireTime = accessTokenExpireTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;encryptJWTKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEncryptJWTKey</span><span class="params">(String encryptJWTKey)</span> &#123;</span><br><span class="line">        JwtUtil.encryptJWTKey = encryptJWTKey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得Token中的信息无需secret解密也能获得</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claim</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getClaim</span><span class="params">(String token, String claim)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">            <span class="comment">// 只能输出String类型，如果是其他类型返回null</span></span><br><span class="line">            <span class="keyword">return</span> jwt.getClaim(claim).asString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;解密Token中的公共信息出现JWTDecodeException异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;解密Token中的公共信息出现JWTDecodeException异常:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token是否正确</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean 是否正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 帐号加JWT私钥解密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> getClaim(token, Constant.ACCOUNT) + Base64ConvertUtil.decode(encryptJWTKey);</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(secret);</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">            verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;JWTToken认证解密出现UnsupportedEncodingException异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;JWTToken认证解密出现UnsupportedEncodingException异常:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account 帐号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String 返回加密的Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String account, String currentTimeMillis)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 帐号加JWT私钥加密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> account + Base64ConvertUtil.decode(encryptJWTKey);</span><br><span class="line">            <span class="comment">// 此处过期时间是以毫秒为单位，所以乘以1000  此处就是设置过期时间</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + Long.parseLong(accessTokenExpireTime) * <span class="number">1000</span>);</span><br><span class="line">            <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(secret);</span><br><span class="line">            <span class="comment">// 附带account帐号信息</span></span><br><span class="line">            <span class="keyword">return</span> JWT.create()</span><br><span class="line">                    .withClaim(<span class="string">&quot;account&quot;</span>, account)   <span class="comment">//进行声明</span></span><br><span class="line">                    .withClaim(<span class="string">&quot;currentTimeMillis&quot;</span>, currentTimeMillis)    <span class="comment">//进行声明</span></span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;JWTToken加密出现UnsupportedEncodingException异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;JWTToken加密出现UnsupportedEncodingException异常:&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="编写JWTToken"><a href="#编写JWTToken" class="headerlink" title="编写JWTToken"></a>编写JWTToken</h3><ol><li><p>原生的shiro是使用自带的UsernamePasswordToken进行身份校验：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//获取当前subject</span><br><span class="line">Subject subject= SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">//创建token</span><br><span class="line">UsernamePasswordToken token=new UsernamePasswordToken(&quot;Jay&quot;,&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">// 登录认证</span><br><span class="line">subject.login(token);</span><br></pre></td></tr></table></figure></li><li><p>使用JWT生成token，取代原来的<code>UsernamePasswordToken</code>，实现<code>AuthenticationToken</code> 接口并且重写<code>getPrincipal</code> 和 <code>getCredentials</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wang.config.shiro.jwt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JwtToken</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtToken</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationToken</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Token</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">JwtToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.token = token;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">getPrincipal</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> token;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">getCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> token;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><h3 id="编写JWTFilter"><a href="#编写JWTFilter" class="headerlink" title="编写JWTFilter"></a>编写JWTFilter</h3><ol><li><p>原生Shiro中<code>UsernamePasswordToken</code> 传入的用户名和密码进行校验的；</p></li><li><p>使用JWT生成Token则是通过前端请求中获取到的；</p></li><li><p>因此需要编写一个<strong>过滤器</strong>对请求进行判断，比如：</p><ul><li><p>是否携带token</p></li><li><p>token是否合法</p></li><li><p>……</p></li></ul></li><li><p>Shiro内置了过滤器，所以对里面的方法进行重写即可</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicHttpAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 过滤器执行流程：</span></span><br><span class="line"><span class="comment">     * isAccessAllowed()-&gt;isLoginAttempt()-&gt;executeLogin()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否允许访问</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoginAttempt(request, response)) &#123;</span><br><span class="line">            <span class="comment">// 有认证意愿</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                executeLogin(request, response);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// token错误</span></span><br><span class="line">                responseError(response,e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有认证意愿（可能是登录行为或者为游客访问）,放行</span></span><br><span class="line">        <span class="comment">// 此处放行是因为有些操作不需要权限也可以执行，而对于那些需要权限才能执行的操作自然会因为没有token而在权限鉴定时被拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否有认证意愿（即是否携带token）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isLoginAttempt</span><span class="params">(ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> token != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">executeLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="type">JWTToken</span> <span class="variable">jwt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JWTToken</span>(token);</span><br><span class="line">        <span class="comment">// 使用自定义的JWTToken而不是默认的UsernamePasswordToken</span></span><br><span class="line">        getSubject(request, response).login(jwt);</span><br><span class="line">        <span class="comment">// 调用了realm中的认证方法，没有出现异常则证明认证成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HttpServletRequest req= (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse res= (HttpServletResponse) response;</span><br><span class="line">        res.setHeader(<span class="string">&quot;Access-control-Allow-Origin&quot;</span>, req.getHeader(<span class="string">&quot;Origin&quot;</span>));</span><br><span class="line">        res.setHeader(<span class="string">&quot;Access-control-Allow-Methods&quot;</span>, <span class="string">&quot;GET,POST,OPTIONS,PUT,DELETE&quot;</span>);</span><br><span class="line">        res.setHeader(<span class="string">&quot;Access-control-Allow-Headers&quot;</span>, req.getHeader(<span class="string">&quot;Access-Control-Request-Headers&quot;</span>));</span><br><span class="line">        <span class="comment">// 跨域时会首先发送一个option请求，这里我们给option请求直接返回正常状态</span></span><br><span class="line">        <span class="keyword">if</span> (req.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            res.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="comment">// 返回true则继续执行拦截链，返回false则中断后续拦截，直接返回，option请求显然无需继续判断，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非法请求跳转</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">responseError</span><span class="params">(ServletResponse response, String msg)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// msg封装为get请求的请求参数，即拼接在url后面，对于中文信息需要进行utf-8编码</span></span><br><span class="line">            msg = URLEncoder.encode(msg, StandardCharsets.UTF_8);</span><br><span class="line">            <span class="comment">// 跳转至控制器unauthorized</span></span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">&quot;/unauthorized/&quot;</span> + msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="编写自定义Realm"><a href="#编写自定义Realm" class="headerlink" title="编写自定义Realm"></a>编写自定义Realm</h2><p>通过自定义的Realm中的：</p><ul><li><p><code>doGetAuthorizationInfo</code>进行权限认证</p></li><li><p><code>doGetAuthenticationInfo</code>进行身份认证</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RoleMapper roleMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PermissionMapper permissionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserRealm</span><span class="params">(UserMapper userMapper, RoleMapper roleMapper, PermissionMapper permissionMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userMapper = userMapper;</span><br><span class="line">        <span class="built_in">this</span>.roleMapper = roleMapper;</span><br><span class="line">        <span class="built_in">this</span>.permissionMapper = permissionMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大坑，必须重写此方法，不然Shiro会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(AuthenticationToken authenticationToken)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationToken <span class="keyword">instanceof</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当需要检测用户权限的时候才会调用此方法，例如checkRole,checkPermission之类的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">simpleAuthorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> JwtUtil.getClaim(principalCollection.toString(), Constant.ACCOUNT);</span><br><span class="line">        <span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDto</span>();</span><br><span class="line">        userDto.setAccount(account);</span><br><span class="line">        <span class="comment">// 查询用户角色</span></span><br><span class="line">        List&lt;RoleDto&gt; roleDtos = roleMapper.findRoleByUser(userDto);</span><br><span class="line">        <span class="keyword">for</span> (RoleDto roleDto : roleDtos) &#123;</span><br><span class="line">            <span class="keyword">if</span> (roleDto != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 添加角色</span></span><br><span class="line">                simpleAuthorizationInfo.addRole(roleDto.getName());</span><br><span class="line">                <span class="comment">// 根据用户角色查询权限</span></span><br><span class="line">                List&lt;PermissionDto&gt; permissionDtos = permissionMapper.findPermissionByRole(roleDto);</span><br><span class="line">                <span class="keyword">for</span> (PermissionDto permissionDto : permissionDtos) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (permissionDto != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 添加权限</span></span><br><span class="line">                        simpleAuthorizationInfo.addStringPermission(permissionDto.getPerCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认使用此方法进行用户名正确与否验证，错误抛出异常即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) authenticationToken.getCredentials();</span><br><span class="line">        <span class="comment">// 解密获得account，用于和数据库进行对比</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> JwtUtil.getClaim(token, Constant.ACCOUNT);</span><br><span class="line">        <span class="comment">// 帐号为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(account)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationException</span>(<span class="string">&quot;Token中帐号为空(The account in Token is empty.)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询用户是否存在</span></span><br><span class="line">        <span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDto</span>();</span><br><span class="line">        userDto.setAccount(account);</span><br><span class="line">        userDto = userMapper.selectOne(userDto);</span><br><span class="line">        <span class="keyword">if</span> (userDto == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationException</span>(<span class="string">&quot;该帐号不存在(The account does not exist.)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开始认证，要AccessToken认证通过，且Redis中存在RefreshToken，且两个Token时间戳一致</span></span><br><span class="line">        <span class="keyword">if</span> (JwtUtil.verify(token) &amp;&amp; JedisUtil.exists(Constant.PREFIX_SHIRO_REFRESH_TOKEN + account)) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">currentTimeMillisRedis</span> <span class="operator">=</span> JedisUtil.getObject(Constant.PREFIX_SHIRO_REFRESH_TOKEN + account).toString();</span><br><span class="line">            <span class="comment">// 获取AccessToken时间戳，与RefreshToken的时间戳对比</span></span><br><span class="line">            <span class="keyword">if</span> (JwtUtil.getClaim(token, Constant.CURRENT_TIME_MILLIS).equals(currentTimeMillisRedis)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(token, token, <span class="string">&quot;userRealm&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationException</span>(<span class="string">&quot;Token已过期(Token expired or incorrect.)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="编写Shiro配置类"><a href="#编写Shiro配置类" class="headerlink" title="编写Shiro配置类"></a>编写Shiro配置类</h3><p>主要配置以下三个功能：</p><ul><li><p>配置使用自定义Realm，关闭Shiro自带的session</p></li><li><p>添加自己的过滤器，自定义过滤规则</p></li><li><p>添加注解权限开发</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置使用自定义Realm，关闭Shiro自带的session</span></span><br><span class="line"><span class="comment">     * 详情见文档 http://shiro.apache.org/session-management.html#SessionManagement-StatelessApplications%28Sessionless%29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRealm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;SpringJavaInjectionPointsAutowiringInspection&quot;)</span>   <span class="comment">//这种情况通常发生在使用泛型时，Spring 在编译时无法确定实际类型，会产生警告，这个注解可以用来消除这种警告</span></span><br><span class="line">    <span class="meta">@Bean(&quot;securityManager&quot;)</span>   <span class="comment">//表示这个方法将会创建一个名为 &quot;securityManager&quot; 的 Bean，并将其添加到 Spring 容器中。其他组件可以通过名称 &quot;securityManager&quot; 来引用这个 Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">(UserRealm userRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">defaultWebSecurityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">// 使用自定义Realm</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(userRealm);</span><br><span class="line">        <span class="comment">// 关闭Shiro自带的session</span></span><br><span class="line">        <span class="type">DefaultSubjectDAO</span> <span class="variable">subjectDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSubjectDAO</span>();</span><br><span class="line">        <span class="type">DefaultSessionStorageEvaluator</span> <span class="variable">defaultSessionStorageEvaluator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSessionStorageEvaluator</span>();<span class="comment">//这两个对象是用来配置 Shiro 是否使用会话存储</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(<span class="literal">false</span>);<span class="comment">// 关闭 Shiro 自带的会话管理功能</span></span><br><span class="line"></span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        defaultWebSecurityManager.setSubjectDAO(subjectDAO);</span><br><span class="line">        <span class="comment">// 设置自定义Cache缓存</span></span><br><span class="line">        defaultWebSecurityManager.setCacheManager(<span class="keyword">new</span> <span class="title class_">CustomCacheManager</span>());</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加自己的过滤器，自定义url规则</span></span><br><span class="line"><span class="comment">     * Shiro自带拦截器配置规则</span></span><br><span class="line"><span class="comment">     * rest：比如/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user：method] ,其中method为post，get，delete等</span></span><br><span class="line"><span class="comment">     * port：比如/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal：//serverName：8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数</span></span><br><span class="line"><span class="comment">     * perms：比如/admins/user/**=perms[user：add：*],perms参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，比如/admins/user/**=perms[&quot;user：add：*,user：modify：*&quot;]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法</span></span><br><span class="line"><span class="comment">     * roles：比如/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，比如/admins/user/**=roles[&quot;admin,guest&quot;],每个参数通过才算通过，相当于hasAllRoles()方法。//要实现or的效果看http://zgzty.blog.163.com/blog/static/83831226201302983358670/</span></span><br><span class="line"><span class="comment">     * anon：比如/admins/**=anon 没有参数，表示可以匿名使用</span></span><br><span class="line"><span class="comment">     * authc：比如/admins/user/**=authc表示需要认证才能使用，没有参数</span></span><br><span class="line"><span class="comment">     * authcBasic：比如/admins/user/**=authcBasic没有参数表示httpBasic认证</span></span><br><span class="line"><span class="comment">     * ssl：比如/admins/user/**=ssl没有参数，表示安全的url请求，协议为https</span></span><br><span class="line"><span class="comment">     * user：比如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查</span></span><br><span class="line"><span class="comment">     * 详情见文档 http://shiro.apache.org/web.html#urls-</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;shiroFilter&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * ShiroFilterFactoryBean 是 Shiro 框架提供的一个 Spring Bean，用于创建和配置 Shiro 的过滤器链。</span></span><br><span class="line"><span class="comment">        * 在 Spring 应用程序中，它充当了一个工厂 bean 的角色，负责创建 ShiroFilter 实例，并将其配置为 Spring 容器的一个 bean。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加自己的过滤器取名为jwt</span></span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;jwt&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtFilter</span>());</span><br><span class="line">        factoryBean.setFilters(filterMap);</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义url规则使用LinkedHashMap有序Map</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">// Swagger接口文档</span></span><br><span class="line">        <span class="comment">// filterChainDefinitionMap.put(&quot;/v2/api-docs&quot;, &quot;anon&quot;);</span></span><br><span class="line">        <span class="comment">// filterChainDefinitionMap.put(&quot;/webjars/**&quot;, &quot;anon&quot;);</span></span><br><span class="line">        <span class="comment">// filterChainDefinitionMap.put(&quot;/swagger-resources/**&quot;, &quot;anon&quot;);</span></span><br><span class="line">        <span class="comment">// filterChainDefinitionMap.put(&quot;/swagger-ui.html&quot;, &quot;anon&quot;);</span></span><br><span class="line">        <span class="comment">// filterChainDefinitionMap.put(&quot;/doc.html&quot;, &quot;anon&quot;);</span></span><br><span class="line">        <span class="comment">// 公开接口</span></span><br><span class="line">        <span class="comment">// filterChainDefinitionMap.put(&quot;/api/**&quot;, &quot;anon&quot;);</span></span><br><span class="line">        <span class="comment">// 登录接口放开</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);  <span class="comment">//将 &quot;/user/login&quot; 路径配置为匿名访问，即不需要身份验证即可访问。</span></span><br><span class="line">        <span class="comment">// 所有请求通过我们自己的JWTFilter</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加注解支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">defaultAdvisorAutoProxyCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">        <span class="comment">// 强制使用cglib，防止重复代理和可能引起代理出错的问题，https://zhuanlan.zhihu.com/p/29161098</span></span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title function_">lifecycleBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifecycleBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/09/19/Spring%E9%9D%A2%E7%BB%8F/"/>
      <url>/2023/09/19/Spring%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><blockquote><h2 id="Spring设计模式"><a href="#Spring设计模式" class="headerlink" title="Spring设计模式"></a>Spring设计模式</h2></blockquote><ol><li>单例模式  </li><li>工厂模式：BeanFactory和ApplicationContext两种IOC容器生产Bean对象  </li><li>代理模式：CGLIB动态代理和JDK动态代理，AOP  </li><li>模版方法：数据库操作，JDBCTemplate</li></ol><blockquote><h2 id="IOC和AOP"><a href="#IOC和AOP" class="headerlink" title="IOC和AOP"></a>IOC和AOP</h2></blockquote><ol><li><p>IOC容器：BeanFactory和ApplicationContext  </p><p>ApplicationContext接口扩展了BeanFactory接口</p><p><img src="/../pictures/bean.PNG"></p></li><li><p>AOP：<strong>实现了接口就是JDK动态代理</strong>，反之就是<strong>CGLIB动态代理</strong>  </p></li><li><p>Spring AOP和AspectJ AOP</p></li></ol><ul><li>Spring AOP基于<strong>动态代理</strong>，AspectJ AOP基于<strong>字节码</strong>  </li><li>Spring AOP<strong>运行时增强</strong>，AspectJ AOP<strong>编译时增强</strong></li></ul><blockquote><h2 id="FactoryBean和BeanFactory"><a href="#FactoryBean和BeanFactory" class="headerlink" title="FactoryBean和BeanFactory"></a>FactoryBean和BeanFactory</h2></blockquote><p>Beanfactory：  </p><ol><li>Bean的工厂  </li><li>ApplicationContext的父类  </li><li>IOC容器的核心  </li><li>负责生产和管理Bean对象</li></ol><p>FactoryBean:  </p><ol><li>一个Bean</li></ol><blockquote><h2 id="SpringBean的生命周期"><a href="#SpringBean的生命周期" class="headerlink" title="SpringBean的生命周期"></a>SpringBean的生命周期</h2></blockquote><ol><li>实例化：创建一个Bean对象  </li><li>属性赋值  </li><li>初始化  </li><li>销毁：容器关闭后，执行destroy方法</li></ol><blockquote><h2 id="Spring如何解决循环依赖"><a href="#Spring如何解决循环依赖" class="headerlink" title="Spring如何解决循环依赖"></a>Spring如何解决循环依赖</h2><p>三种循环依赖的情况  </p></blockquote><ol><li>构造器的循环依赖：无法处理，抛出异常  </li><li>单例模式下setter循环依赖：<strong>三级缓存</strong>处理  </li><li>非单例循环依赖：无法处理</li></ol><p>三级缓存<br>目的：延迟代理对象的创建  </p><ol><li>一级缓存（singletonObjects）：保存实例化初始化都完成的对象  </li><li>二级缓存（earlySingletonObjects）：保存实例化完成，初始化未完成的对象  </li><li>三级缓存（SingletonFactories）：保存一个对象工厂，提供一个匿名内部类，创建二级缓存中的对象</li></ol><p>二级缓存也行，为什么要三级缓存  </p><ol><li>B依赖的A和最终的A不是同一个对象  </li><li>使用三级缓存是为了保证不管任何时候使用的都是一个对象</li></ol><p><img src="/../pictures/%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98.jpg"></p><blockquote><h2 id="Spring事务传播机制"><a href="#Spring事务传播机制" class="headerlink" title="Spring事务传播机制"></a>Spring事务传播机制</h2><p>七种  </p></blockquote><ol><li>没有事务创建事务，存在事务加入事务  </li><li>无论存在与否，创建新事务  </li><li>存在事务，嵌套事务内执行，没有事务，创建事务  </li><li>非事务方式执行，存在事务挂起事务  </li><li>非事务方式执行，存在事务抛出异常  </li><li>存在事务加入事务，不存在事务抛出异常  </li><li>存在事务加入事务，不存在事务，非事务方式执行</li></ol><blockquote><h2 id="构造方法注入和setter注入"><a href="#构造方法注入和setter注入" class="headerlink" title="构造方法注入和setter注入"></a>构造方法注入和setter注入</h2></blockquote><p><img src="/../pictures/%E6%B3%A8%E5%85%A5.JPG"></p><blockquote><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2></blockquote><ol><li><p>no：默认设置，表示没有自动装配，显式bean引用进行装配</p></li><li><p>byName</p></li><li><p>byType</p></li><li><p>构造函数：调用类的构造函数注入依赖项，有大量参数</p></li><li><p>autodetect：首先尝试通过构造函数使用autowire装配，如果不能，则尝试使用byType进行装配</p></li></ol><blockquote><h2 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h2><p>降低耦合，提高重用，提升开发效率</p></blockquote><ol><li><p>Aspect（切面）：Aspect&#x3D;Pointcut+Advice</p></li><li><p>Joint point（连接点）</p></li><li><p>Pointcut（切点）</p></li><li><p>Advice（增强，通知）：在Pointcut处具体要做的操作</p></li><li><p>Target（目标对象）：织入Advice的目标对象</p></li><li><p>Weaving（织入）：把增强代码应用到目标上，生成代理对象的过程</p></li></ol></blockquote><blockquote><h2 id="MyBatis相关"><a href="#MyBatis相关" class="headerlink" title="MyBatis相关"></a>MyBatis相关</h2><blockquote><h3 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h3><ul><li><p>#{}：底层是PrepareStatement，先进行SQL语句编译，然后给SQL语句占位符？传值</p></li><li><p>${}：底层是Statement，先进行SQL语句拼接，再对SQL语句编译</p></li></ul></blockquote><blockquote><h3 id="和的区别"><a href="#和的区别" class="headerlink" title="和的区别"></a><association>和<collection>的区别</h3><p><strong>两者都出现在<resultMap>中</strong>，都可以实现<strong>延迟加载</strong></p><ul><li><p><association>主要描述一对一的关联关系</p></li><li><p><collection>主要描述一对多的关联关系</p></li></ul></blockquote><blockquote><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><p>优点：提高程序性能，减少资源消耗</p><ul><li><p>全局配置：lazyLoadingEnabled&#x3D;true|false</p></li><li><p>标签配置：fetchType&#x3D;”eager”</p></li></ul></blockquote></blockquote><blockquote><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><blockquote><ol><li><p>基本组件：</p><ul><li><p><code>DispatcherServlet</code>：前端控制器，负责请求的接受和分发</p></li><li><p><code>HandlerMapping</code>：控制器映射器，根据url匹配查找具体的<code>Handler</code>，如果有拦截器会和<code>Handler</code>一起封装</p></li><li><p><code>HandlerAdapter</code>：处理器适配器，适配执行找到的<code>Handler</code></p></li><li><p><code>Handler</code>：处理器，处理具体的业务逻辑、</p></li><li><p><code>ViewResolver</code>：视图解析器，根据获得的<code>ModleAndView</code>解析具体的<code>View</code></p></li></ul></li><li><p>基本流程：</p><ul><li><p><code>DispatcherServlet</code>接收用户请求</p></li><li><p><code>DispatcherServlet</code>调用<code>HandlerMapping</code>，<code>HandlerMapping</code>再去根据具体的URL匹配查找具体的<code>Handler</code>,如果有拦截器对象则封装一并返回给<code>DispatcherServlet</code></p></li><li><p><code>DispatcherServlet</code>调用<code>HandlerAdapter</code>，适配找到的<code>Handler</code>，并且处理具体的业务逻辑，并返回<code>ModelAndView</code>给<code>DispatcherServlet</code></p></li><li><p><code>DispatcherServlet</code>将<code>ModelAndView</code>转发给<code>ViewResolver</code>进行解析获得<code>View</code>，并返回给<code>DispatcherServlet</code></p></li><li><p><code>DispatcherServlet</code>渲染拿到的<code>View</code>，并将响应用户</p></li></ul></li></ol></blockquote></blockquote><blockquote><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><blockquote><p><code>@SpringBootApplication</code>是核心注解，主要由<code>@SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan</code>组成</p><p><strong>自动装配</strong>：根据应用的依赖关系和配置，自动配置Spring应用的各个组件，从而简化了开发者的工作</p><p>其中：</p><ul><li><p><code>@SpringBootConfiguration</code>：标记启动类为配置类</p></li><li><p><code>@ComponentScan</code>：实现启动时扫描启动类所在的包以及子包下所有标记为bean的类由IOC容器注册为bean</p></li><li><p><code>@EnableAutoConfiguration</code>：通过类加载器加载<code>META-INF/spring.factories</code>里定义的自动配置类，筛选有效的自动配置类，每个自动配置类结合对应的配置文件进行自动装配功能</p></li></ul></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web相关</title>
      <link href="/2023/09/19/Web/web%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/09/19/Web/web%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="HTTP常见状态码"><a href="#HTTP常见状态码" class="headerlink" title="HTTP常见状态码"></a>HTTP常见状态码</h2><blockquote><ol><li><p><strong>1</strong>开头（信息类）</p><ul><li>100：接受的请求正在处理</li></ul></li><li><p><strong>2</strong>开头（成功类）</p><ul><li>200：服务器成功处理请求</li></ul></li><li><p><strong>3</strong>开头（重定向）</p><ul><li><p>301：永久重定向，资源被分配了新的url</p></li><li><p>302：临时重定向，资源被零时被分配了新的url</p></li><li><p>303：资源存在另一个url，用get方法获取资源</p></li></ul></li><li><p><strong>4</strong>开头（客户端错误）</p><ul><li><p>400：错误请求，服务器不理解请求语法</p></li><li><p>401：表示发送的请求需要有HTTP认证的认证信息</p></li><li><p>403：禁止，服务器拒绝请求</p></li><li><p>404：未找到，服务器找不到请求网页</p></li></ul></li><li><p><strong>5</strong>开头（服务器错误）</p><ul><li><p>500：服务器内部错误，无法完成请求</p></li><li><p>503：服务器停机维护或者超载，无法处理请求</p></li></ul></li></ol></blockquote></blockquote><blockquote><h2 id="重定向和转发"><a href="#重定向和转发" class="headerlink" title="重定向和转发"></a>重定向和转发</h2><blockquote><ul><li><p>重定向（redirect）</p><ol><li><p>浏览器端进行的资源跳转</p></li><li><p>特点:</p><ul><li><p>新的地址</p></li><li><p>请求2次</p></li><li><p>请求域中的数据会丢失</p></li></ul></li><li><p>SpringMVC中的写法：<code>&quot;redirect:/target&quot;</code></p></li></ol><p><img src="/../../pictures/redirect.png"></p></li><li><p>转发（forward）</p><ol><li><p>一种在服务器内部的资源跳转方式</p></li><li><p>特点：</p><ul><li><p>地址不发生变化</p></li><li><p>只能转发到当前服务器内部资源中</p></li><li><p>1次请求</p></li><li><p>请求域中的数据不会丢失</p></li></ul></li><li><p>SpringMVC中的写法：<code>&quot;forward:/target&quot;</code></p></li></ol><p><img src="/../../pictures/forward.png"></p></li></ul></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap排序</title>
      <link href="/2023/09/19/HashMap%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/09/19/HashMap%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="小红书面试题"><a href="#小红书面试题" class="headerlink" title="小红书面试题"></a>小红书面试题</h2><blockquote><p>详细题目描述略</p><h2 id="题目本意是-HashMap根据其value排序，如果value相等，则根据key的字典序排序"><a href="#题目本意是-HashMap根据其value排序，如果value相等，则根据key的字典序排序" class="headerlink" title="题目本意是 HashMap根据其value排序，如果value相等，则根据key的字典序排序"></a>题目本意是 HashMap根据其value排序，如果value相等，则根据key的字典序排序</h2><p>直接给出代码，温故而知新</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Latitude_X</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/8/7 20:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sortMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        sortMap sortMap=<span class="keyword">new</span> <span class="title class_">sortMap</span>();</span><br><span class="line">        sortMap.getWords(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getWords</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        String[] split = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        HashMap&lt;String,Integer&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s1 : split) &#123;</span><br><span class="line">            hashMap.put(s1,hashMap.getOrDefault(s1,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Map.Entry&lt;String,Integer&gt;&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(hashMap.entrySet());   <span class="comment">//放入hashMap的entry值</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1.getValue()== o2.getValue())&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getKey().compareTo(o2.getKey());</span><br><span class="line">                &#125;   <span class="comment">//频率相等，以字典序排列</span></span><br><span class="line">                <span class="keyword">return</span> o2.getValue()- o1.getValue();    <span class="comment">//频率逆序排列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//qwe ewq ewq a wws a a a a a qwe ewq wws rty  [rty=1, wws=2, qwe=2, ewq=3, a=6]</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; stringIntegerEntry : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span>+stringIntegerEntry.getKey()+<span class="string">&quot;value: &quot;</span>+stringIntegerEntry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2023/09/19/git%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/19/git%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="Git的三个区域"><a href="#Git的三个区域" class="headerlink" title="Git的三个区域"></a>Git的三个区域</h2><blockquote><ol><li><p>工作区</p><ul><li><p>电脑里面能看的目录</p></li><li><p>通过以下命令进行Git初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li></ul></li><li><p>暂存区</p><ul><li><p>一般存放在 .git 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）</p></li><li><p>通过以下命令将工作区文件添加到暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li></ul></li><li><p>版本库&#x2F;本地仓库</p><ul><li><p>通过一下命令将暂存区文件提交到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;message备注信息&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="注意，文件要提交到本地仓库后才能够push到远程仓库中去"><a href="#注意，文件要提交到本地仓库后才能够push到远程仓库中去" class="headerlink" title="注意，文件要提交到本地仓库后才能够push到远程仓库中去"></a>注意，文件要提交到本地仓库后才能够push到远程仓库中去</h2><p><img src="/../pictures/git.jpg"></p></blockquote></blockquote><blockquote><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><blockquote><ol><li><p>克隆一个项目到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [address]</span><br></pre></td></tr></table></figure></li><li><p>查看本地仓库当前状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status [-s]</span><br></pre></td></tr></table></figure><p>有三种状态：</p><ul><li><p><code>Changes to be committed:</code>已经从工作区add到暂存区的文件</p></li><li><p><code>Changes not staged for commit:</code>表示工作区，暂时区都存在的file（文件或文件夹），在工作区进行修改或删除，但是没有add到暂存区</p></li><li><p><code>Untracked files:</code>表示只在工作区有的file（文件或文件夹），也就是在暂时区没有该file</p></li></ul></li><li></li></ol></blockquote></blockquote><blockquote><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><blockquote><ol><li><p>显示所有远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">origin  http://gitlab.sys.wanmei.com/quark</span><br><span class="line">/mainland/apidev.laohu.com.git (fetch)</span><br><span class="line">表示该远程仓库可用于拉取操作</span><br><span class="line">origin  http://gitlab.sys.wanmei.com/quar</span><br><span class="line">k/mainland/apidev.laohu.com.git (push)</span><br><span class="line">表示该远程仓库可用于推送操作</span><br></pre></td></tr></table></figure><ul><li><p>添加远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;GitLab仓库URL&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm &lt;别名&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取远程代码库，但是不合并本地分支代码库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [别名，如：origin]</span><br></pre></td></tr></table></figure><p>如果要合并本地（更新）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [远程主机名/本地仓库]</span><br></pre></td></tr></table></figure></li><li><p>拉取远程代码库，并且合并本地版本，其实是以上<code>fetch+merge</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line">如果远程分支和本地分支一样，则冒号后面可以省略</span><br></pre></td></tr></table></figure></li><li><p>将本地分支版本上传到远程合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">如果远程分支和本地分支一样，则冒号后面可以省略</span><br></pre></td></tr></table></figure></li><li><p>切换本地分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设备采集</title>
      <link href="/2023/09/19/adb%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/09/19/adb%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><blockquote><ol><li><p>终端设备</p></li><li><p>主版本</p><p>**</p></li><li><p>子版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure></li><li><p>CPU品牌</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi   (需处理)</span><br></pre></td></tr></table></figure></li><li><p>CPU型号</p></li><li><p>CPU主频(最大)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq</span><br><span class="line">(最大，单位HZ)</span><br></pre></td></tr></table></figure></li><li><p>CPU核心数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /sys/devices/system/cpu/present</span><br></pre></td></tr></table></figure></li><li><p>RAM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/meminfo   (需处理)</span><br></pre></td></tr></table></figure></li><li><p>分辨率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size</span><br></pre></td></tr></table></figure></li><li><p>全面屏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size   (需判断)</span><br></pre></td></tr></table></figure></li><li><p>ROM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell df -h /data</span><br></pre></td></tr></table></figure></li><li><p>设备类型</p><p>手机</p></li><li><p>品牌</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.brand</span><br></pre></td></tr></table></figure></li><li><p>设备名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.name</span><br></pre></td></tr></table></figure></li><li><p>设备型号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.model</span><br></pre></td></tr></table></figure></li><li><p>CPU架构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure></li><li><p>CPUHardware</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/cpuinfo    (需处理)</span><br></pre></td></tr></table></figure></li><li><p>CPU型号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.board</span><br></pre></td></tr></table></figure></li><li><p>CPU架构-详细</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /proc/cpuinfo   (需处理)</span><br></pre></td></tr></table></figure></li><li><p>armeabi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abilist  (需处理)</span><br></pre></td></tr></table></figure></li><li><p>armeabi-v7a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abilist  (需处理)</span><br></pre></td></tr></table></figure></li><li><p>arm64-v8a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abilist  (需处理)</span><br></pre></td></tr></table></figure></li><li><p>mips</p><p>无</p></li><li><p>mips64</p><p>无</p></li><li><p>x86</p><p>**</p></li><li><p>x86_64</p><p>**</p></li><li><p>GPU品牌</p></li><li><p>GPU渲染器</p></li><li><p>GPU版本</p></li><li><p>MAC地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /sys/class/net/wlan0/address</span><br></pre></td></tr></table></figure></li><li><p>网络制式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys telephony.registry | findstr /i &quot;mVoiceNetworkType&quot;</span><br></pre></td></tr></table></figure></li><li><p>资产型号</p></li></ol></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/2023/07/22/Web/WebSocket/"/>
      <url>/2023/07/22/Web/WebSocket/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="CS架构——BS架构"><a href="#CS架构——BS架构" class="headerlink" title="CS架构——BS架构"></a>CS架构——BS架构</h2><blockquote><ul><li><p>BS架构</p><ol><li><p>Browser&#x2F;Server(浏览器&#x2F;服务器模式)</p></li><li><p>优点：</p><ul><li><p>web应用</p></li><li><p>实现跨平台</p></li><li><p>客户端零维护</p></li></ul></li><li><p>缺点：</p><ul><li><p>交互能力相对弱</p></li><li><p>响应速度相对慢</p></li><li><p>安全性相对低</p></li></ul></li></ol></li><li><p>CS架构</p><ol><li><p>Client&#x2F;Server(客户端&#x2F;服务器模式)</p></li><li><p>优点：</p><ul><li><p>桌面级应用</p></li><li><p>响应速度快</p></li><li><p>安全性强</p></li><li><p>交互性强</p></li></ul></li><li><p>缺点：</p><ul><li><p>管理开销大</p></li><li><p>硬件要求高</p></li></ul></li></ol></li></ul></blockquote></blockquote><blockquote><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><blockquote><ol><li><p><strong>WebSocket</strong>是什么?</p><ul><li><p>基于<strong>TCP</strong>的应用层协议</p></li><li><p>实现了浏览器和服务器之间的<strong>全双工通信</strong>，能够更好的节约服务器资源和带宽并达到实时通讯的目的</p></li><li><p><strong>持久化</strong>协议</p></li><li><p>浏览器和服务器建立连接后，可以<strong>互相主动请求</strong></p></li></ul></li><li><p>与<strong>HTTP</strong>协议的关系</p><ul><li><p>相同点：</p><ul><li><p>基于TCP，都是可靠传输协议</p></li><li><p>应用层协议</p></li></ul></li><li><p>不同点：</p><ul><li><p>WebSocket是双向的，HTTP是单向的</p></li><li><p>WebSocket需要浏览器和服务器握手进行连接建立，HTTP是浏览器主动向服务器发起连接建立，服务器预先不知道</p></li></ul></li></ul></li><li><p>联系</p><p>WebSocket<strong>建立握手</strong>时，数据通过HTTP传输，<strong>连接建立后</strong>，真正的传输不需要HTTP协议</p></li></ol><p><img src="/../../pictures/web/1.png"></p><ol start="4"><li><p>WebSocket解决的问题</p><ul><li><p>HTTP协议无状态：每一次会话完都不知道下一次客户端是谁</p></li><li><p>HTTP协议每次请求都要携带大量HEAD头，解析需要时间，效率低下</p></li><li><p>客户端主动发送，服务端被动发送，不能实现主动发送</p></li></ul></li></ol></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日程计划</title>
      <link href="/2023/06/10/%E7%A7%8B%E6%8B%9B/"/>
      <url>/2023/06/10/%E7%A7%8B%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="秋招"><a href="#秋招" class="headerlink" title="秋招"></a>秋招</h1><blockquote><h2 id="1-秋招日程"><a href="#1-秋招日程" class="headerlink" title="1. 秋招日程"></a>1. 秋招日程</h2><h2 id="2-工作方向"><a href="#2-工作方向" class="headerlink" title="2. 工作方向"></a>2. 工作方向</h2><h2 id="3-秋招准备"><a href="#3-秋招准备" class="headerlink" title="3. 秋招准备"></a>3. 秋招准备</h2><p><strong>需要学习的东西（重要）</strong>：</p><ul><li><p><strong>行测（银行国企）</strong>，可去看b站看教程，但不建议事无巨细的看一遍，不懂的再去选择性的看</p><ul><li><p>粉笔app</p></li><li><p>后期可以买卷子</p></li></ul></li><li><p>408、java基础、数据库、基础框架知识等等<strong>计算机知识</strong>，无论私企还是国企银行都要准备，因此这个最为重要</p><ul><li><p>PDF背即可</p></li><li><p>LeetCode每周还是要刷刷题，不强制要求，但是每周还是希望<strong>刷3道以上</strong></p></li></ul></li></ul><h2 id="4-城市（次要考虑）"><a href="#4-城市（次要考虑）" class="headerlink" title="4. 城市（次要考虑）"></a>4. 城市（次要考虑）</h2><ul><li><p>武汉，长沙，杭州，成都</p></li><li><p>广州，深圳</p></li></ul></blockquote></blockquote><blockquote><h1 id="毕业论文"><a href="#毕业论文" class="headerlink" title="毕业论文"></a>毕业论文</h1><blockquote><ol><li><p>每晚<strong>8:00</strong>下班，在公司做到<strong>9：00</strong>论文相关的事，比如：</p><ul><li><p>看论文</p></li><li><p>跑代码</p></li></ul></li><li><p>一周至少能看完<strong>2篇论文</strong></p></li><li><p>目标是在 <strong>9月底，10月初</strong>能有所成果</p></li><li><p>最终目标是能在<strong>实习结束前，能够构思好新的研究目标，能够在回学校就开始跑实验</strong></p></li></ol></blockquote></blockquote><blockquote><h1 id="研究最后一年学习计划"><a href="#研究最后一年学习计划" class="headerlink" title="研究最后一年学习计划"></a>研究最后一年学习计划</h1><blockquote><ol><li><p>软考</p></li><li><p><strong>六级450以上</strong></p></li><li><p>其他的有空就准备</p></li></ol></blockquote></blockquote><blockquote><h1 id="存钱"><a href="#存钱" class="headerlink" title="存钱"></a>存钱</h1><blockquote><ol><li><p>目标是 <strong>每个月存4000</strong></p><ul><li><p>如果做四个月，那么就可以存到<strong>1.6W</strong></p></li><li><p>如果做五个月，呢么就可以存到<strong>2W</strong></p></li></ul></li><li><p>支出打算：</p><ul><li><p>准备<strong>1W买相机！！！</strong></p></li><li><p>准备<strong>2K给爸妈</strong>，<strong>1K请吃饭</strong>，<strong>1K其他事</strong></p></li></ul></li></ol></blockquote></blockquote><blockquote><h1 id="每天去上班能做什么"><a href="#每天去上班能做什么" class="headerlink" title="每天去上班能做什么"></a>每天去上班能做什么</h1><blockquote><ol><li><p>天晴坐地铁，下雨坐公交（还是视情况而定），以公交为主</p></li><li><p>每天通勤来回两小时，在交通工具上<strong>背单词！！！</strong>，强调一遍，<strong>背单词！！！</strong></p></li><li><p>在上班时间，抓住一切机会<strong>学习新技术</strong>，如果可以，上班时间闲下来的时候，可以看看<strong>NLP的微信公众号</strong>，了解下这个领域的最新进展</p></li><li><p>当然咯，工作时间还是以把工作任务完成为主，目标是<strong>在十月份前不被公司开除······</strong></p></li></ol></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Session和Cookie</title>
      <link href="/2023/02/19/Web/Session&amp;Cookie/"/>
      <url>/2023/02/19/Web/Session&amp;Cookie/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p><strong>无状态协议</strong></p><p>一个请求分为以下三步：</p><ul><li><p>客户端发送请求给服务器</p></li><li><p>服务器处理该请求</p></li><li><p>服务器将处理结果响应给客户端</p></li></ul><p>之后该客户端再次向该服务区发送请求后，服务器端并不能知道这两个请求是否是同一个浏览器或用户发出来的。所以作为web服务器必须能够<strong>采用某种方式来唯一识别同一个用户，并记录该用户的状态</strong>。</p></blockquote><blockquote><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>用户打开浏览器，访问web服务器的多个资源，最后关闭浏览器，中间的一系列过程可理解为会话。   </p></blockquote></blockquote><blockquote><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>采用<strong>在客户端保持http状态信息</strong>的方案</p></blockquote><blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当一个浏览器访问某web服务器时，web服务器会调用<code>HttpServletResponse</code> 的<code>addCookie()</code>方法，在响应头中添加一个名叫Set-Cookie的响应字段用于将Cookie返回给浏览器，当浏览器第二次访问该web服务器时会自动的将该cookie回传给服务器，来实现用户状态跟踪。</p><p><img src="/../../pictures/1.png"></p></blockquote><blockquote><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><ol><li><p>会话级别Cookie</p><ul><li><p>默认情况下为会话级别Cookie</p></li><li><p>存储在<strong>浏览器内存</strong>中，用户退出后被删除</p></li></ul></li><li><p>持久化Cookie</p><ul><li><p>通过<code>setMaxAge</code>设置Cookie的生命周期</p></li><li><p>以<strong>秒</strong>为单位</p></li><li><p>最大时效设置为0则是命令浏览器删除该Cookie</p></li><li><p>存储在<strong>电脑磁盘</strong>里面</p></li></ul></li></ol></blockquote><blockquote><h3 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h3><ul><li><p>自动登录（免密登录）</p></li><li><p>跟踪用户上次访问时间</p></li><li><p>显示最近浏览信息</p></li><li><p>······</p></li></ul></blockquote></blockquote><blockquote><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><blockquote><h3 id="机制-1"><a href="#机制-1" class="headerlink" title="机制"></a>机制</h3><p>采用在<strong>服务器端保持http状态信息</strong>的方案</p></blockquote><blockquote><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><ol><li><p>用户发送请求到服务器，服务器检查请求中是否有<code>sessionid</code></p></li><li><p>如果不存在（说明是第一次请求），为该用户创建一个session对象，并将该session对象的<code>sessionid</code>响应给客户端</p></li><li><p>如果存在，就在服务器端查找是否有<code>sessionid</code>对应的session，如果有就使用，没有就创建一个</p></li></ol></blockquote><blockquote><h3 id="基本应用-1"><a href="#基本应用-1" class="headerlink" title="基本应用"></a>基本应用</h3><ul><li><p>浏览器的会话跟踪</p><p>将<code>sessionid</code>存到cookie中，再把cookie存到磁盘中，浏览器访问改服务器时，会读到cookie中的<code>sessionid</code>，回到上次访问的页面</p></li></ul></blockquote></blockquote><blockquote><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><blockquote><ol><li><p><strong>Cookie</strong>只可以存在在浏览器或者本地，<strong>Session</strong>只存在在服务器</p></li><li><p><strong>Cookie</strong>只存String类型的对象，<strong>Session</strong>可存任意类型的java对象</p></li><li><p><strong>Session</strong>比<strong>Cookie</strong>更安全</p></li></ol></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL————分数排名</title>
      <link href="/2023/02/19/MySQL/%E5%88%86%E6%95%B0%E6%8E%92%E5%90%8D/"/>
      <url>/2023/02/19/MySQL/%E5%88%86%E6%95%B0%E6%8E%92%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>+————-+———+<br>| Column Name | Type    |<br>+————-+———+<br>| id          | int     |<br>| score       | decimal |<br>+————-+———+<br>Id是该表的主键。<br>该表的每一行都包含了一场比赛的分数。Score是一个有两位小数点的浮点值。</p><p>编写 SQL 查询对分数进行排序。排名按以下规则计算:</p><ul><li><p>分数应按从高到低排列。</p></li><li><p>如果两个分数相等，那么两个分数的排名应该相同。</p></li><li><p>在排名相同的分数后，排名数应该是下一个连续的整数。换句话说，排名之间不应该有空缺的数字。</p></li></ul><p>按 score 降序返回结果表。</p></blockquote></blockquote><blockquote><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Scores (id <span class="type">int</span>, score <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Scores;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3.5&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3.65&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4.0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3.85&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4.0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Scores (id, score) <span class="keyword">values</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;3.65&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Scores;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>3.50</td></tr><tr><td>2</td><td>3.65</td></tr><tr><td>3</td><td>4.00</td></tr><tr><td>4</td><td>3.85</td></tr><tr><td>5</td><td>4.00</td></tr><tr><td>6</td><td>3.65</td></tr></tbody></table><hr><blockquote><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2></blockquote><blockquote><blockquote><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3></blockquote></blockquote><ul><li><p><code>distinct</code>在此处的作用是避免序号连续不重复</p></li><li><p>注意这里<code>RANK</code>为关键词，因此要加<code>&#39;&#39;</code></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.score,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> b.score) <span class="keyword">from</span> Scores b <span class="keyword">where</span> b.score<span class="operator">&gt;=</span>a.score) <span class="keyword">as</span> <span class="string">&#x27;RANK&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Scores a</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.score <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>score</th><th>RANK</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><hr><blockquote><blockquote><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3></blockquote></blockquote><p>理解<code>group by</code>,不能查找<code>*</code>,只能查找<strong>某一列</strong>或者<strong>聚合函数</strong>，比如<code>sum()或者count()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.score,<span class="built_in">count</span>(<span class="keyword">distinct</span> b.score) <span class="keyword">as</span><span class="string">&#x27;RANK&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Scores a,Scores b</span><br><span class="line"><span class="keyword">where</span> b.score<span class="operator">&gt;=</span>a.score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.id,a.score</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.score <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>score</th><th>RANK</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><hr><blockquote><blockquote><h3 id="方法三——窗口函数（重点）"><a href="#方法三——窗口函数（重点）" class="headerlink" title="方法三——窗口函数（重点）"></a>方法三——窗口函数（重点）</h3></blockquote></blockquote><p><strong><code>dense_rank</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> score,</span><br><span class="line">(<span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>)) <span class="keyword">as</span> <span class="string">&#x27;RANK&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Scores;</span><br></pre></td></tr></table></figure><table><thead><tr><th>score</th><th>RANK</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><hr><blockquote><h2 id="窗口函数学习——排名函数"><a href="#窗口函数学习——排名函数" class="headerlink" title="窗口函数学习——排名函数"></a>窗口函数学习——排名函数</h2></blockquote><p><strong>1.rank</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> score,</span><br><span class="line">(<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>)) <span class="keyword">as</span> <span class="string">&#x27;RANK&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Scores;</span><br></pre></td></tr></table></figure><table><thead><tr><th>score</th><th>RANK</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>3</td></tr><tr><td>3.65</td><td>4</td></tr><tr><td>3.65</td><td>4</td></tr><tr><td>3.50</td><td>6</td></tr></tbody></table><hr><p><strong>2.row_number</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> score,</span><br><span class="line">(<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>)) <span class="keyword">as</span> <span class="string">&#x27;RANK&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Scores;</span><br></pre></td></tr></table></figure><table><thead><tr><th>score</th><th>RANK</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>2</td></tr><tr><td>3.85</td><td>3</td></tr><tr><td>3.65</td><td>4</td></tr><tr><td>3.65</td><td>5</td></tr><tr><td>3.50</td><td>6</td></tr></tbody></table><hr><p><strong>3.dense_rank</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> score,</span><br><span class="line">(<span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>)) <span class="keyword">as</span> <span class="string">&#x27;RANK&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Scores;</span><br></pre></td></tr></table></figure><table><thead><tr><th>score</th><th>RANK</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><hr><p><a href="https://www.db-fiddle.com/">View on DB Fiddle</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>颠倒二进制位</title>
      <link href="/2023/02/19/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2023/02/19/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>颠倒给定的 32 位无符号整数的二进制位</p><ol><li><p><strong>输入</strong>：n &#x3D; 00000010100101000001111010011100<br><strong>输出</strong>：964176192 (00111001011110000010100101000000)<br><strong>解释</strong>：输入的二进制串 <strong>00000010100101000001111010011100</strong> 表示无符号整数 43261596，</p><pre><code>因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。</code></pre></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverseBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rev=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>&amp;&amp;n!=<span class="number">0</span>;i++)&#123;</span><br><span class="line">        rev|=(n&amp;<span class="number">1</span>)&lt;&lt;(<span class="number">31</span>-i);   </span><br><span class="line">    <span class="comment">//  （n&amp;1）：取出从右至左第一位 </span></span><br><span class="line">   <span class="comment">// &lt;&lt;(31-i)：逻辑左移至从左至右的对称位   </span></span><br><span class="line">  <span class="comment">//  rev|：保留上一次状态 总体就是翻转</span></span><br><span class="line">        n&gt;&gt;&gt;=<span class="number">1</span>;      <span class="comment">//无符号逻辑右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><p><code>&lt;&lt;</code>逻辑左移</p></li><li><p><code>&gt;&gt;</code>逻辑右移</p></li><li><p><code>&gt;&gt;&gt;</code>无符号右移</p></li><li><p><code>&amp;</code>逻辑与</p></li><li><p><code>|</code>逻辑或</p></li><li><p><code>~</code>逻辑非</p></li><li><p><code>^</code>逻辑异或：输入不同则为1，输入相同则为0，如<code>1^0=1,1^1=0,0^0=0</code></p></li></ul><h3 id="右移相关"><a href="#右移相关" class="headerlink" title="右移相关"></a>右移相关</h3><ul><li><p>在有些语言运算中，二进制最高位用来区分正负，如在java中int类型占32位：</p><p><code>5:0000 0000 0000 0000 0000 0000 0000 0101</code></p><p><code>-5:1111 1111 1111 1111 1111 1111 1111 1011</code>(取反加一)</p></li><li><p>逻辑右移后，<strong>负数最高位补1</strong>，<strong>整数最高位补0</strong>，如：</p><p><code>-5右移3位后结果为-1，-1的二进制为： 1111 1111 1111 1111 1111 1111 1111 1111   // (用1进行补位)</code></p></li><li><p>无符号右移后，也就是<code>&gt;&gt;&gt;</code>,正负数都补0，如：</p><p><code>-5无符号右移3位后的结果 536870911 换算成二进制： 0001 1111 1111 1111 1111 1111 1111 1111   // (用0进行补位)</code></p></li><li><p><strong>逻辑左移一律补0</strong></p></li></ul></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可能的二分法</title>
      <link href="/2023/02/19/%E7%AE%97%E6%B3%95/%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95%E2%80%94%E2%80%94%E6%9F%93%E8%89%B2%E6%B3%95/"/>
      <url>/2023/02/19/%E7%AE%97%E6%B3%95/%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BA%8C%E5%88%86%E6%B3%95%E2%80%94%E2%80%94%E6%9F%93%E8%89%B2%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给定一组 n 人（编号为 1, 2, …, n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p><p>给定整数 n 和数组 dislikes ，其中 dislikes[i] &#x3D; [ai, bi] ，表示不允许将编号为 ai 和  bi的人归入同一组。当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。</p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, dislikes = [[1,2],[1,3],[2,4]]</span><br><span class="line">输出：true</span><br><span class="line">解释：group1 [1,4], group2 [2,3]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>链接：<a href="https://leetcode.cn/problems/possible-bipartition/">https://leetcode.cn/problems/possible-bipartition/</a></p></blockquote></blockquote><blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><blockquote><p>首先这道题，按我的理解是可以将<code>dislikes</code>数组转换为无向图，以示例二为例：</p><p><img src="/../../pictures/%E7%AE%97%E6%B3%95/%E6%9F%93%E8%89%B2%E6%B3%95.PNG"></p><p> 而题目肯定需要将<code>dislikes</code>遍历一遍，可以想到可能会采用<strong>DFS或者BFS</strong>来进行遍历。因为BFS更好理解，所以这里采用BFS实现。</p><p>接下来便是为啥可以用染色法。</p><p>首先理解题目，题目是要将满足<code>dislikes</code>的条件下是否可以将人分为<strong>两组</strong>，染色法结局步骤如下：</p><ul><li><p>第一组的人为红色，编号为0；</p></li><li><p>第二组的人为蓝色，编号为1；</p></li><li><p>依次遍历每一个人，如果该人没有染色，分到红色组，那么这个人不喜欢的人一定分到蓝组；</p></li><li><p>任何被分到蓝组的人，不喜欢的人一定分到红组；</p></li><li><p>依次类推；</p></li><li><p>在染色过程中出现无法解决的冲突，证明任务不可完成；</p></li><li><p>否则证明可分。</p></li></ul></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><p>代码里面已经给了很详细的注释，需要好好品味，包括如果实现BFS需要用<strong>队列</strong>来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">possibleBipartition</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] dislikes)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] g=<span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] color=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            g[i]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] p:dislikes)&#123;</span><br><span class="line">            g[p[<span class="number">0</span>]].add(p[<span class="number">1</span>]);</span><br><span class="line">            g[p[<span class="number">1</span>]].add(p[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  将不喜欢的数组归类放一个集合中去，有点像把不喜欢的人构建成无向图</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*            0：尚未染色的</span></span><br><span class="line"><span class="comment">*            1：红色</span></span><br><span class="line"><span class="comment">*            2：蓝色</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(color[i]==<span class="number">0</span>)&#123;   <span class="comment">//尚未染色的进</span></span><br><span class="line">                Queue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">                queue.add(i);   <span class="comment">//尚未染色的进队列，遍历</span></span><br><span class="line">                color[i]=<span class="number">1</span>;    <span class="comment">//染成红色</span></span><br><span class="line">                <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                    <span class="type">int</span> t=queue.remove();  <span class="comment">//出队</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> next:g[t])&#123;</span><br><span class="line">                        <span class="comment">//遍历该节点不喜欢的节点</span></span><br><span class="line">                        <span class="keyword">if</span>(color[next]!=<span class="number">0</span>&amp;&amp;color[next]==color[t])&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;<span class="comment">//  如果该节点已经标记过颜色，并且和不喜欢的节点一个颜色，也就是只能分一组，表示冲突，返回false</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(color[next]==<span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="comment">//如果没有染色，则对其染色</span></span><br><span class="line">                            color[next]=<span class="number">3</span>^color[t];   <span class="comment">//这里表示异或，其实就是相当于是如果上一个节点颜色是1，那么该节点颜色就得为2，其实就是一个判断语句优雅的写出来了而已</span></span><br><span class="line">                            queue.add(next);     <span class="comment">//那么继续把这个节点入队，重复该操作，直到所有节点均染色并且没有冲突</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口————水果成篮</title>
      <link href="/2023/02/19/%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2023/02/19/%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><ul><li><p>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。</p></li><li><p>你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</p></li><li><p>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</p></li></ul><p>给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。</p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = [0,1,2,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘 [1,2,2] 这三棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：可以采摘 [1,2,1,1,2] 这五棵树。</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><blockquote><p>采用<strong>滑动窗口</strong>的思路解决，步骤如下：</p><ul><li><p>窗口内永远只存在两类值，因此要设置左边界<code>left</code>以及右边界<code>right</code>，并且不断调整左右边界；</p></li><li><p>设置Hashmap记录每个数的个数；</p></li><li><p>当Hashmap中数的个数超过两类后就要开始挪动左边界<code>left</code>了；</p></li><li><p>当<code>left</code>已经移到下一个数时，就要从集合中将该数删去；</p></li><li><p>以此往复，不断记录比较窗口内数的个数，选出最大的那个即可。</p><p><img src="/../../pictures/%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.png"></p></li></ul></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> right=<span class="number">0</span>;right&lt;fruits.length;right++)&#123;</span><br><span class="line">            hashMap.put(fruits[right],hashMap.getOrDefault(fruits[right],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (hashMap.size()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                hashMap.put(fruits[left],hashMap.get(fruits[left])-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(hashMap.get(fruits[left])==<span class="number">0</span>)&#123;</span><br><span class="line">                    hashMap.remove(fruits[left]);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            result=Math.max(result,right-left+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2023/02/19/%E7%AE%97%E6%B3%95/%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/02/19/%E7%AE%97%E6%B3%95/%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>输入</strong>：head &#x3D; [1,2,3,4,5]<br><strong>输出</strong>：[5,4,3,2,1]</p><p><img src="/../../pictures/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A81.PNG"></p><p>力扣链接：<a href="https://leetcode.cn/problems/reverse-linked-list/description/">https://leetcode.cn/problems/reverse-linked-list/description/</a></p></blockquote></blockquote><blockquote><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><blockquote><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>迭代算法需要申请两个额外指针</p><ul><li><p><code>pre</code>：指向当前节点的之前节点，最初是要指向null的</p></li><li><p><code>next</code>:暂存当前节点的下一节点</p></li></ul><p>算法大致思想是：</p><ol><li><p>暂存当前节点的下一节点；</p></li><li><p>将当前节点的下一节点指向<code>pre</code>;</p></li><li><p>将之前节点移向当前节点；</p></li><li><p>将当前节点放到下一节点；</p></li><li><p>迭代。</p></li></ol><p><img src="/../../pictures/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A82.PNG"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        ListNode pre=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            ListNode next=head.next;</span><br><span class="line">            head.next=pre;</span><br><span class="line">            pre=head;</span><br><span class="line">            head=next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p><code>res</code>其实就是<strong>原链表的最后一个节点</strong>，<strong>新链表的第一个节点</strong>，找出来后不操作，最后作为结果返回。</p><p>这里提醒一点：</p><p><code>head.next.next=head;</code>和<code>head.next=null;</code>不可改变顺序，前一步是改变指针顺序，后一步操作是断链。</p><p><code>head.next.next=head;</code>：其实就是将head 的下一个节点指向head，看下图理解：</p><p><img src="/../../pictures/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A83.PNG"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>||head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">        ListNode res=reverseList(head.next);</span><br><span class="line">        head.next.next=head;</span><br><span class="line">        head.next=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>颜色交替的最短路径</title>
      <link href="/2023/02/03/%E7%AE%97%E6%B3%95/BFS/"/>
      <url>/2023/02/03/%E7%AE%97%E6%B3%95/BFS/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>在一个有向图中，节点分别标记为 <code>0, 1, ..., n-1</code>。图中每条边为红色或者蓝色，且存在自环或平行边。</p><p><code>red_edges</code> 中的每一个 <code>[i, j]</code> 对表示从节点 <code>i</code> 到节点 <code>j</code> 的红色有向边。类似地，<code>blue_edges</code> 中的每一个 <code>[i, j]</code> 对表示从节点 <code>i</code> 到节点 <code>j</code> 的蓝色有向边。</p><p>返回长度为 <code>n</code> 的数组 <code>answer</code>，其中 <code>answer[X]</code> 是从节点 <code>0</code> 到节点 <code>X</code> 的红色边和蓝色边交替出现的最短路径的长度。如果不存在这样的路径，那么 <code>answer[x] = -1</code>。</p><ol><li><strong>输入</strong>：<strong>n &#x3D; 3, red_edges &#x3D; [[0,1],[1,2]], blue_edges &#x3D; []<br>输出</strong>：[0,1,-1]</li></ol></blockquote></blockquote><blockquote><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><blockquote><p><strong>广度优先搜索BFS</strong>的模板题，但是需要变形，需牢记</p><ol><li><p>首先建立存放每个节点<strong>邻居节点</strong>的数据结构；</p></li><li><p>创建存放路径的数组；</p></li><li><p>建立搜索队列，将尚未访问过的节点放入队列中，记得需要对其进行初始化；</p></li><li><p>不断遍历队列以及每个节点的邻居节点，这里是要不同颜色交叉访问，因此需要注意标记位的变换；</p></li><li><p>路径公式：<code>dist[1-color][i]=dist[color][node]+1</code></p></li><li><p>当所有节点访问完，证明节点0到所有节点路径已求出；</p></li><li><p>最后通过遍历，对比找到节点0到其他节点的最短路径即可。</p></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] shortestAlternatingPaths(<span class="type">int</span> n, <span class="type">int</span>[][] redEdges, <span class="type">int</span>[][] blueEdges) &#123;</span><br><span class="line">        List&lt;Integer&gt;[][] next=<span class="keyword">new</span> <span class="title class_">List</span>[<span class="number">2</span>][n];  <span class="comment">//存放邻居节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            next[<span class="number">0</span>][i]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            next[<span class="number">1</span>][i]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] redEdge : redEdges) &#123;</span><br><span class="line">            next[<span class="number">0</span>][redEdge[<span class="number">0</span>]].add(redEdge[<span class="number">1</span>]);</span><br><span class="line">        &#125;  <span class="comment">//存放红色边的邻居节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] blueEdge : blueEdges) &#123;</span><br><span class="line">            next[<span class="number">1</span>][blueEdge[<span class="number">0</span>]].add(blueEdge[<span class="number">1</span>]);</span><br><span class="line">        &#125;  <span class="comment">//存放蓝色边的邻居节点</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] dist=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][n];   <span class="comment">//最短路径</span></span><br><span class="line">        Arrays.fill(dist[<span class="number">0</span>],Integer.MAX_VALUE);</span><br><span class="line">        Arrays.fill(dist[<span class="number">1</span>],Integer.MAX_VALUE);   <span class="comment">//初始化所有最短路径为MAX</span></span><br><span class="line"></span><br><span class="line">        dist[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dist[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;     <span class="comment">//初始化 节点0 到节点0的长度为0</span></span><br><span class="line"></span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();  <span class="comment">//BFS 遍历队列</span></span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">0</span>&#125;);   <span class="comment">//将第一个节点入队</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span>[] tem=queue.poll();  <span class="comment">//出队</span></span><br><span class="line">            <span class="type">int</span> color=tem[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> node=tem[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (Integer i : next[<span class="number">1</span> - color][node]) &#123;   <span class="comment">//遍历的就是另一种颜色对应下该节点的邻居节点</span></span><br><span class="line">                <span class="keyword">if</span>(dist[<span class="number">1</span>-color][i]!=Integer.MAX_VALUE)&#123;    <span class="comment">//如果到该节点的路径还没求</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dist[<span class="number">1</span>-color][i]=dist[color][node]+<span class="number">1</span>;  <span class="comment">//到下一颜色节点的距离，等于目前节点的距离+1</span></span><br><span class="line"></span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>-color,i&#125;);   <span class="comment">//不同颜色路径的邻居节点入队</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> r=Math.min(dist[<span class="number">0</span>][i],dist[<span class="number">1</span>][i]);</span><br><span class="line">            <span class="keyword">if</span>(r==Integer.MAX_VALUE)&#123;</span><br><span class="line">                res[i]=-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res[i]=r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DFS-BFS-并查集</title>
      <link href="/2022/12/23/%E7%AE%97%E6%B3%95/DFS-BFS-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2022/12/23/%E7%AE%97%E6%B3%95/DFS-BFS-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>检查两个节点是否在同一个连通分量里面</p><p><strong>输入</strong>：n &#x3D; 6, edges &#x3D; [[0,1],[0,2],[3,5],[5,4],[4,3]], source &#x3D; 0, destination &#x3D; 5<br><strong>输出</strong>：false<br><strong>解释</strong>：不存在由顶点 0 到顶点 5 的路径.</p><p><img src="/../../pictures/java/4.png"></p></blockquote></blockquote><blockquote><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><blockquote><p>题目要求判断是否存在从起点 source到终点 destination的有效路径，等价于求图中<strong>两个顶点 source,destination 是否连通</strong>。两点连通性问题为经典问题，一般可以使用<strong>广度优先搜索</strong>或<strong>深度优先搜索</strong>，以及<strong>并查集</strong>来解决。</p></blockquote></blockquote><blockquote><h2 id="广度优先算法BFS"><a href="#广度优先算法BFS" class="headerlink" title="广度优先算法BFS"></a>广度优先算法BFS</h2><blockquote><p>关键设置：</p><ul><li><p>设置<strong>队列</strong>存储最近访问过的节点；</p></li><li><p>设置<strong>标记位</strong>记录已经访问过的节点；</p></li></ul><p>算法步骤：</p><ol><li><p>初始化：将顶点source设为已访问，并且入队；</p></li><li><p>将队列中的节点vertex出队；</p></li><li><p>将与vertex相邻并且尚未访问的节点入队，并且设为已经访问；</p></li><li><p>如果队列为空前访问到destination，则返回<code>true</code>，否则返回<code>false</code></p></li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] lists=<span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            lists[i]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;<span class="comment">//创建n个list集合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> a=edge[<span class="number">0</span>],b=edge[<span class="number">1</span>];</span><br><span class="line">            lists[a].add(b);</span><br><span class="line">            lists[b].add(a);</span><br><span class="line">        &#125;  <span class="comment">//为每个节点添加邻居节点</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span>[] tar=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];  <span class="comment">//标记位，被访问过的记为true</span></span><br><span class="line">        Queue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();    <span class="comment">//将邻居节点入队，检查是否是最终节点</span></span><br><span class="line">        queue.offer(source);   <span class="comment">//初始节点入队</span></span><br><span class="line">        tar[source]=<span class="literal">true</span>;  <span class="comment">//标记已访问初始节点</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> index=queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(index==destination)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lists[index].size(); i++) &#123;</span><br><span class="line">                <span class="type">int</span> tem=lists[index].get(i);</span><br><span class="line">                <span class="keyword">if</span>(!tar[tem])&#123;</span><br><span class="line">                    queue.offer(tem);</span><br><span class="line">                    tar[tem]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="深度优先搜索DFS"><a href="#深度优先搜索DFS" class="headerlink" title="深度优先搜索DFS"></a>深度优先搜索DFS</h2><blockquote><p>算法步骤：</p><ol><li><p>从source开始递归搜寻；</p></li><li><p>每次递归访问到vertex时，如果是destination则返回<code>true</code>，否则将该节点设为已访问；</p></li><li><p>递归访问vertex相邻并且还没有访问的节点next；</p></li><li><p>依次访问所有节点，如果所有节点均已访问完都没有destination，返回<code>false</code>。</p></li></ol></blockquote><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt;[] lists=<span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">           lists[i]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       &#125;<span class="comment">//创建n个list集合</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">           <span class="type">int</span> a=edge[<span class="number">0</span>],b=edge[<span class="number">1</span>];</span><br><span class="line">           lists[a].add(b);</span><br><span class="line">           lists[b].add(a);</span><br><span class="line">       &#125;  <span class="comment">//为每个节点添加邻居节点</span></span><br><span class="line"></span><br><span class="line">       <span class="type">boolean</span>[] tar=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];  <span class="comment">//标记位，被访问过的记为true</span></span><br><span class="line">       tar[source]=<span class="literal">true</span>;  <span class="comment">//标记已访问初始节点</span></span><br><span class="line">       <span class="keyword">return</span> dfs(lists,destination,tar,source);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(List&lt;Integer&gt;[] lists,<span class="type">int</span> destination,<span class="type">boolean</span>[] tar,<span class="type">int</span> source)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(source==destination)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;   <span class="comment">//不是终止递归，而是返回上一级递归</span></span><br><span class="line">       tar[source]=<span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">for</span> (Integer i : lists[source]) &#123;</span><br><span class="line">           <span class="keyword">if</span>(!tar[i]&amp;&amp;dfs(lists, destination, tar, i))&#123;   <span class="comment">//放入邻居节点</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="并查集（重要！！！入门级别）"><a href="#并查集（重要！！！入门级别）" class="headerlink" title="并查集（重要！！！入门级别）"></a>并查集（重要！！！入门级别）</h2><blockquote><p>算法思想：</p><p>将图中的每个<strong>强连通分量</strong>视为一个集合，强连通分量中任意两点均可达，如果两个点 <strong>source和 destination处在同一个强连通分量</strong>中，则两点一定可连通，因此连通性问题可以使用<strong>并查集</strong>解决。</p><p>算法步骤：</p><ol><li><p>初始化initial：n个顶点属于n个不同的集合，每个集合只包含一个顶点；</p></li><li><p>合并union：将同一条边连接的两个集合做合并操作；</p></li><li><p>查找find：查找source和destination是否在同一个集合中，如果在则证明连通，否则不连通。</p></li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] tar=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        tar[i]=i;</span><br><span class="line">    &#125;  <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">        union(tar,edge[<span class="number">0</span>],edge[<span class="number">1</span>]);</span><br><span class="line">    &#125;  <span class="comment">// 合并操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> find(tar,source)==find(tar,destination);   <span class="comment">//如果不在一个连通分量中，那肯定不能联通</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span>[] tar,<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    a=find(tar,a);  <span class="comment">//a的根节点</span></span><br><span class="line">    b=find(tar,b);  <span class="comment">//b的根节点</span></span><br><span class="line">    tar[b]=a;  <span class="comment">//合并两个根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] tar,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tar[a]!=a)&#123;</span><br><span class="line">        tar[a]=find(tar,tar[a]);  <span class="comment">//路径压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tar[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>抽象类Abstract和枚举类Enum</title>
      <link href="/2022/10/12/java/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
      <url>/2022/10/12/java/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="抽象Abstract"><a href="#抽象Abstract" class="headerlink" title="抽象Abstract"></a>抽象Abstract</h2><blockquote><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p>就是在父类的方法还不知道要做什么时，仅仅是为了给出方法名时使用</p></li><li><p>目的就是为了让子类去覆盖它</p></li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li><p>类中有抽象方法，那么该类也要声明为抽象类；</p></li><li><p>抽象方法不给出具体实现逻辑，由子类去重写实现；</p></li><li><p><strong>抽象类无法被实例化</strong>；</p></li><li><p>抽象方法不能被<code>private</code>修饰，因为抽象方法需要被子类重写，而<code>private</code>修饰后不能被子类访问，所以相矛盾；</p></li><li><p>抽象方法不能被<code>static</code>修饰，因为抽象类不能被实例化，<code>static</code>修饰后的方法可直接通过类名调用，相矛盾；</p></li><li><p>抽象方法不能被<code>final</code>修饰，因为<code>final</code>修饰的类无法被继承，而抽象类就是需要继承去实现抽象方法，相矛盾；</p></li><li><p>如果一个类继承了一个抽象类，那么需要重写抽象类中所有的抽象方法。</p></li></ul><h3 id="和接口对比"><a href="#和接口对比" class="headerlink" title="和接口对比"></a>和接口对比</h3><ul><li><p>接口中不能有实例方法去实现业务逻辑；</p></li><li><p>抽象类中可以有实例方法去实现业务逻辑。</p></li></ul></blockquote></blockquote><blockquote><h2 id="枚举Enum"><a href="#枚举Enum" class="headerlink" title="枚举Enum"></a>枚举Enum</h2><blockquote><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li><p>没有枚举类时定义常量的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zejian on 2017/5/7.</span></span><br><span class="line"><span class="comment"> * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]</span></span><br><span class="line"><span class="comment"> * 使用普通方式定义日期常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DayDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MONDAY</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> TUESDAY=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> WEDNESDAY=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> THURSDAY=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> FRIDAY=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SATURDAY=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SUNDAY=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举类的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举类型，使用关键字enum</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">  MONDAY, TUESDAY, WEDNESDAY,</span><br><span class="line">  THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ul><li><p>在定义枚举类型时我们使用的关键字是<code>enum</code>，与<code>class</code>关键字类似，只不过前者是定义枚举类型，后者是定义类类型</p></li><li><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//直接引用</span></span><br><span class="line">        <span class="type">Day</span> <span class="variable">day</span> <span class="operator">=</span>Day.MONDAY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义枚举类型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY,</span><br><span class="line">    THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>servlet生命周期</title>
      <link href="/2022/10/11/java/servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/10/11/java/servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="init（）"><a href="#init（）" class="headerlink" title="init（）"></a>init（）</h2><blockquote><ul><li><p>Servlet初始化后开始调用<code>init（）</code>方法；</p></li><li><p>用户在发送第一次请求后，Servlet对象被实例化，那么就开始执行内部的方法；</p></li><li><p><code>init（）</code>方法只能在用户<strong>第一次发送请求时被调用一次</strong>，后续请求该方法不再被执行；</p></li><li><p>当然，也可以在xml里面设置Servlet在服务器启动时就初始化Servlet，也就是执行<code>init()</code>方法。</p></li></ul></blockquote></blockquote><blockquote><h2 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h2><blockquote><ul><li><p><code>service()</code>方法是执行实际任务的主要方法，调用该方法处理来自客户端的请求；</p></li><li><p>每接受一次请求，服务器产生一个新的线程调用该服务；</p></li><li><p><strong>可执行多次</strong>。</p></li></ul></blockquote></blockquote><blockquote><h2 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h2><blockquote><ul><li><p><code>destroy()</code>方法也<strong>只执行一次</strong>；</p></li><li><p>在服务器关闭时被调用；</p></li><li><p>执行后，Servlet对象被标记为垃圾回收。</p></li></ul></blockquote></blockquote><p><img src="/../../pictures/java/1.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC设计模式</title>
      <link href="/2022/10/11/java/MVC/"/>
      <url>/2022/10/11/java/MVC/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="Model-模型"><a href="#Model-模型" class="headerlink" title="Model(模型)"></a>Model(模型)</h2><blockquote><ul><li><p>处理<strong>数据逻辑</strong>的部分</p></li><li><p>负责在数据库中存取数据</p></li></ul></blockquote></blockquote><blockquote><h2 id="View-视图"><a href="#View-视图" class="headerlink" title="View(视图)"></a>View(视图)</h2><blockquote><ul><li><p>处理<strong>数据显示</strong>的部分</p></li><li><p>依据模型数据创建</p></li></ul></blockquote></blockquote><blockquote><h2 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller(控制器)"></a>Controller(控制器)</h2><blockquote><ul><li><p>处理<strong>用户交互</strong>的部分</p></li><li><p>从视图读取数据，控制用户输入，向模型发送数据</p></li></ul></blockquote></blockquote><p><img src="/../../pictures/java/2.png"></p><blockquote><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><blockquote><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><ol><li><p>作用</p><ul><li><p><strong>做数据持久层的工作</strong></p></li><li><p>负责与数据库进行联络</p></li></ul></li><li><p>设计</p><ul><li><p>设计dao层接口</p></li><li><p>基本都是数据库CRUD的一些方法</p></li></ul></li></ol></blockquote></blockquote><blockquote><blockquote><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><ol><li><p>作用</p><ul><li><p><strong>业务模块的应用逻辑设计</strong></p></li><li><p>调用Dao层接口，并且提供接口给Controller层</p></li></ul></li><li><p>设计</p><ul><li><strong>建立Dao层之上，Controller层之下</strong></li></ul></li></ol></blockquote></blockquote><blockquote><blockquote><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><ol><li><p>作用</p><ul><li><strong>负责具体业务模块流程的控制</strong></li><li>负责url映射</li></ul></li><li><p>设计</p><ul><li><strong>调用service层的接口</strong>来控制业务流程</li></ul></li></ol></blockquote></blockquote><p><img src="/../../pictures/java/3.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回捡MySQL计划第六天！</title>
      <link href="/2022/09/11/MySQL/Day06/"/>
      <url>/2022/09/11/MySQL/Day06/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>编写一个 SQL 查询，获取并返回 <code>Employee</code> 表中第二高的薪水 。如果不存在第二高的薪水，查询应该返回 <code>null</code> 。</p></blockquote></blockquote><blockquote><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (id <span class="type">int</span>, salary <span class="type">int</span>);</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, salary) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, salary) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;200&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (id, salary) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;300&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Employee;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>300</td></tr></tbody></table><hr><blockquote><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><blockquote><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>查询所有小于最大薪水的值，并在这些值中找到最大值，也就是第二高的薪水（不灵活）。</p></blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(<span class="keyword">distinct</span> salary) <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">from</span> Employee</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&lt;</span>(<span class="keyword">select</span> <span class="built_in">max</span>(<span class="keyword">distinct</span> salary) <span class="keyword">from</span> Employee);</span><br></pre></td></tr></table></figure><table><thead><tr><th>SecondHighestSalary</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><hr><blockquote><blockquote><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用函数判断，后面细说。</p></blockquote></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ifnull(</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> salary </span><br><span class="line"><span class="keyword">from</span> Employee </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span>,<span class="number">1</span>),<span class="keyword">null</span>) <span class="keyword">as</span> SecondHighestSalary;</span><br></pre></td></tr></table></figure><table><thead><tr><th>SecondHighestSalary</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><hr><blockquote><h2 id="函数学习"><a href="#函数学习" class="headerlink" title="函数学习"></a>函数学习</h2><blockquote><p><code>limit A offset B</code>:</p><ul><li><p><code>limit n</code> 表示从第几条数据开始；</p></li><li><p><code>offset n</code>表示跳过n条数据；</p></li><li><p>连在一起就是<strong>从第A条数据开始，选取B条数据</strong>。</p></li><li><p><strong>注意</strong>：<code>limit</code>的下标是从0开始，并且后面不可跟<strong>非正数以及表达式</strong>。</p></li></ul><p><code>ifnull(a,b)</code>:</p><ul><li><p>如果<code>a</code>不为空，则返回<code>a</code>；</p></li><li><p>如果<code>a</code>为空，则返回<code>b</code>；</p></li></ul></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回捡MySQL计划第五天！</title>
      <link href="/2022/09/10/MySQL/Day05/"/>
      <url>/2022/09/10/MySQL/Day05/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><blockquote><ol><li><p><strong>原子性（Atomicity）</strong>：一个事物的操作要么都做，要么都不做，事务执行过程发生错误就会回滚<code>Rollback</code>，回到事务执行开始前的状态。</p></li><li><p><strong>一致性（Consistency）</strong>：事务开始前和事务开始后，数据库的完整性没有破坏。</p></li><li><p><strong>隔离性（Isolation）</strong>：多个事务并发执行时，不会因为其交叉执行而导致数据的不一致。</p></li><li><p><strong>持久性（Durability）</strong>：事务结束后，对数据的修改就是永久的。</p></li></ol><p><strong>其中，事务只能保证AID，即：原子性，隔离性，持久性。一致性无法通过事务保证，主要依赖于应用层和开发者</strong></p></blockquote></blockquote><blockquote><h2 id="建表一"><a href="#建表一" class="headerlink" title="建表一"></a>建表一</h2></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> table01(</span><br><span class="line">  id <span class="type">int</span></span><br><span class="line">  )engine<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><hr><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table><hr><blockquote><h2 id="开始事务"><a href="#开始事务" class="headerlink" title="开始事务"></a>开始事务</h2></blockquote><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>；</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td></tr></tbody></table><hr><blockquote><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2></blockquote><p>回滚的是<code>begin</code>和<code>rollback</code>间的事务，而<code>rollback</code>和<code>commit</code>间的事务会照常执行。</p><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>6</td></tr></tbody></table><hr><blockquote><h2 id="子事务"><a href="#子事务" class="headerlink" title="子事务"></a>子事务</h2></blockquote><p><strong>Query #1</strong></p><p><code>savepoint</code>相当于在事务中指定了一个子事务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">savepoint</span> point01;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table01 <span class="keyword">value</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> point01;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>6</td></tr><tr><td>7</td></tr><tr><td>9</td></tr></tbody></table><hr><blockquote><h2 id="建表二"><a href="#建表二" class="headerlink" title="建表二"></a>建表二</h2></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> table01(</span><br><span class="line">  id <span class="type">int</span>,</span><br><span class="line">  name <span class="type">char</span>(<span class="number">20</span>),</span><br><span class="line">  age <span class="type">int</span></span><br><span class="line">  )engine<span class="operator">=</span>InnoDB;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (id,name,age) <span class="keyword">values</span> (<span class="number">1</span>,&quot;Jay&quot;,<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (id,name,age) <span class="keyword">values</span> (<span class="number">2</span>,&quot;Ashin&quot;,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><hr><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>30</td></tr><tr><td>2</td><td>Ashin</td><td>40</td></tr></tbody></table><hr><blockquote><h2 id="展示表结构"><a href="#展示表结构" class="headerlink" title="展示表结构"></a>展示表结构</h2></blockquote><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>name</td><td>char(20)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>age</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr></tbody></table><hr><blockquote><h2 id="drop删除列"><a href="#drop删除列" class="headerlink" title="drop删除列"></a>drop删除列</h2></blockquote><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table01 <span class="keyword">drop</span> age;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #3</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>name</td><td>char(20)</td><td>YES</td><td></td><td></td><td></td></tr></tbody></table><hr><blockquote><h2 id="add增加列"><a href="#add增加列" class="headerlink" title="add增加列"></a>add增加列</h2></blockquote><p><strong>Query #4</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table01 <span class="keyword">add</span> age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #5</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>name</td><td>char(20)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>age</td><td>int(11)</td><td>NO</td><td></td><td></td><td></td></tr></tbody></table><hr><p><strong>Query #6</strong></p><p><code>first</code>关键字将列放到第一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table01 <span class="keyword">add</span> sex <span class="type">char</span> <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #7</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>sex</td><td>char(1)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>id</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>name</td><td>char(20)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>age</td><td>int(11)</td><td>NO</td><td></td><td></td><td></td></tr></tbody></table><hr><p><strong>Query #8</strong></p><p><code>after</code>关键字将列指定某一列后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table01 <span class="keyword">add</span> count <span class="type">int</span> after name;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #9</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>sex</td><td>char(1)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>id</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>name</td><td>char(20)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>count</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>age</td><td>int(11)</td><td>NO</td><td></td><td></td><td></td></tr></tbody></table><hr><blockquote><h2 id="modify和change修改列信息"><a href="#modify和change修改列信息" class="headerlink" title="modify和change修改列信息"></a>modify和change修改列信息</h2></blockquote><p><strong>Query #10</strong></p><p><code>modify</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table01 modify name <span class="type">varchar</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><hr><p><strong>Query #11</strong></p><p><code>change</code>关键字，后第一个位置表示<strong>将更改的列名</strong>，后面表示<strong>更改后的列信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table01 change count money <span class="type">bigint</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>Query #12</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> columns <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>sex</td><td>char(1)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>id</td><td>int(11)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>name</td><td>varchar(30)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>money</td><td>bigint(20)</td><td>YES</td><td></td><td></td><td></td></tr><tr><td>age</td><td>int(11)</td><td>NO</td><td></td><td></td><td></td></tr></tbody></table><hr><blockquote><h2 id="rename-to更改表名"><a href="#rename-to更改表名" class="headerlink" title="rename to更改表名"></a>rename to更改表名</h2></blockquote><p><strong>Query #13</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table01 rename <span class="keyword">to</span> table01_re;</span><br></pre></td></tr></table></figure><hr><p><a href="https://www.db-fiddle.com/">View on DB Fiddle</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回捡MySQL计划第四天！</title>
      <link href="/2022/09/09/MySQL/Day04/"/>
      <url>/2022/09/09/MySQL/Day04/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> table01(</span><br><span class="line">  id <span class="type">int</span> auto_increment,</span><br><span class="line">  name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  use_time <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id)</span><br><span class="line">  )engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Jay&quot;,&quot;男&quot;,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Tay&quot;,&quot;女&quot;,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Jay&quot;,&quot;男&quot;,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Ashin&quot;,&quot;男&quot;,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> table02(</span><br><span class="line">  id <span class="type">int</span> auto_increment,</span><br><span class="line">  name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="type">time</span> datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id)</span><br><span class="line">  )engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table02 (name,<span class="type">time</span>) <span class="keyword">values</span>(&quot;Jay&quot;,now());</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table02 (name,<span class="type">time</span>) <span class="keyword">values</span>(&quot;Jay&quot;,now());</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table02 (name,<span class="type">time</span>) <span class="keyword">values</span>(&quot;Fun&quot;,now());</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table02 (name,<span class="type">time</span>) <span class="keyword">values</span>(&quot;Ashin&quot;,now());</span><br></pre></td></tr></table></figure><hr><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>use_time</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>3</td></tr><tr><td>2</td><td>Tay</td><td>女</td><td>2</td></tr><tr><td>3</td><td>Jay</td><td>男</td><td>3</td></tr><tr><td>4</td><td>Ashin</td><td>男</td><td>3</td></tr></tbody></table><hr><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table02;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>time</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>2022-09-09 08:43:52</td></tr><tr><td>2</td><td>Jay</td><td>2022-09-09 08:43:52</td></tr><tr><td>3</td><td>Fun</td><td>2022-09-09 08:43:52</td></tr><tr><td>4</td><td>Ashin</td><td>2022-09-09 08:43:52</td></tr></tbody></table><hr><blockquote><h2 id="inner-join-内连接"><a href="#inner-join-内连接" class="headerlink" title="inner join 内连接"></a>inner join 内连接</h2><p><img src="/pictures/MySQL/1.png"></p></blockquote><p><strong>Query #3</strong></p><p>查询出的结果<strong>不会去重</strong>，如果要去重需要加关键字<code>distinct</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.id,a.name,a.sex,b.time <span class="keyword">from</span> table01 a <span class="keyword">inner</span> <span class="keyword">join</span> table02 b <span class="keyword">on</span> a.name<span class="operator">=</span>b.name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>time</th></tr></thead><tbody><tr><td>3</td><td>Jay</td><td>男</td><td>2022-09-09 08:43:52</td></tr><tr><td>1</td><td>Jay</td><td>男</td><td>2022-09-09 08:43:52</td></tr><tr><td>3</td><td>Jay</td><td>男</td><td>2022-09-09 08:43:52</td></tr><tr><td>1</td><td>Jay</td><td>男</td><td>2022-09-09 08:43:52</td></tr><tr><td>4</td><td>Ashin</td><td>男</td><td>2022-09-09 08:43:52</td></tr></tbody></table><hr><p><strong>Query #4</strong></p><p><code>distinct</code>去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> a.id,a.name,a.sex,b.time <span class="keyword">from</span> table01 a <span class="keyword">inner</span> <span class="keyword">join</span> table02 b <span class="keyword">on</span> a.name<span class="operator">=</span>b.name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>time</th></tr></thead><tbody><tr><td>3</td><td>Jay</td><td>男</td><td>2022-09-09 08:43:52</td></tr><tr><td>1</td><td>Jay</td><td>男</td><td>2022-09-09 08:43:52</td></tr><tr><td>4</td><td>Ashin</td><td>男</td><td>2022-09-09 08:43:52</td></tr></tbody></table><hr><blockquote><h2 id="left-join-左连接"><a href="#left-join-左连接" class="headerlink" title="left join 左连接"></a>left join 左连接</h2><p><img src="/pictures/MySQL/2.png"></p></blockquote><p><strong>Query #5</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.id,a.name,a.sex,a.use_time,b.time <span class="keyword">from</span> table01 a <span class="keyword">left</span> <span class="keyword">join</span> table02 b <span class="keyword">on</span> a.name<span class="operator">=</span>b.name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>use_time</th><th>time</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>3</td><td>2022-09-09 08:43:52</td></tr><tr><td>1</td><td>Jay</td><td>男</td><td>3</td><td>2022-09-09 08:43:52</td></tr><tr><td>2</td><td>Tay</td><td>女</td><td>2</td><td></td></tr><tr><td>3</td><td>Jay</td><td>男</td><td>3</td><td>2022-09-09 08:43:52</td></tr><tr><td>3</td><td>Jay</td><td>男</td><td>3</td><td>2022-09-09 08:43:52</td></tr><tr><td>4</td><td>Ashin</td><td>男</td><td>3</td><td>2022-09-09 08:43:52</td></tr></tbody></table><hr><blockquote><h2 id="right-join-右连接"><a href="#right-join-右连接" class="headerlink" title="right join 右连接"></a>right join 右连接</h2><p><img src="/pictures/MySQL/3.png"></p></blockquote><p><strong>Query #6</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> b.id,b.name,a.sex,a.use_time,b.time <span class="keyword">from</span> table01 a <span class="keyword">right</span> <span class="keyword">join</span> table02 b <span class="keyword">on</span> a.name<span class="operator">=</span>b.name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>time</th><th>sex</th><th>use_time</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>2022-09-09 08:43:52</td><td>男</td><td>3</td></tr><tr><td>2</td><td>Jay</td><td>2022-09-09 08:43:52</td><td>男</td><td>3</td></tr><tr><td>3</td><td>Fun</td><td>2022-09-09 08:43:52</td><td></td><td></td></tr><tr><td>4</td><td>Ashin</td><td>2022-09-09 08:43:52</td><td>男</td><td>3</td></tr></tbody></table><hr><blockquote><h2 id="关于NULL"><a href="#关于NULL" class="headerlink" title="关于NULL"></a>关于NULL</h2></blockquote><ol><li><p>以<code>NULL</code>为关键字进行查询，使用<code>==或者！=</code>是没用的，比如下面这种：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01 <span class="keyword">where</span> name<span class="operator">=</span><span class="operator">=</span><span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01 <span class="keyword">where</span> name<span class="operator">!=</span><span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>应该写成如下形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01 <span class="keyword">where</span> name <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table01 <span class="keyword">where</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回捡MySQL计划第三天！</title>
      <link href="/2022/09/08/MySQL/Day03/"/>
      <url>/2022/09/08/MySQL/Day03/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> test01(</span><br><span class="line">  id <span class="type">int</span> unsigned auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age <span class="type">int</span>,</span><br><span class="line">  <span class="type">date</span> datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id)</span><br><span class="line">  )engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> test01 (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Jay&quot;,&quot;男&quot;,<span class="number">40</span>,now());</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> test01 (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Ashin&quot;,&quot;男&quot;,<span class="number">40</span>,now());</span><br><span class="line">      <span class="keyword">insert</span> <span class="keyword">into</span> test01 (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Mayday&quot;,&quot;男&quot;,<span class="number">100</span>,now());</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> test01 (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;friday&quot;,&quot;女&quot;,<span class="number">150</span>,now());</span><br><span class="line">          <span class="keyword">insert</span> <span class="keyword">into</span> test01 (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Imaginedragons&quot;,&quot;男&quot;,<span class="number">60</span>,now());</span><br><span class="line">            <span class="keyword">insert</span> <span class="keyword">into</span> test01 (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Leizi&quot;,&quot;男&quot;,<span class="number">33</span>,now());</span><br><span class="line">              <span class="keyword">insert</span> <span class="keyword">into</span> test01 (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Taylor&quot;,&quot;女&quot;,<span class="number">28</span>,now());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> test02(</span><br><span class="line">  id <span class="type">int</span> unsigned auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  count <span class="keyword">double</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="type">date</span> datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id)</span><br><span class="line">  )engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> test02 (name,count,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Jay&quot;,<span class="number">1234</span>,now());</span><br><span class="line">     <span class="keyword">insert</span> <span class="keyword">into</span> test02 (name,count,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Ashin&quot;,<span class="number">1453</span>,now());</span><br><span class="line">      <span class="keyword">insert</span> <span class="keyword">into</span> test02 (name,count,<span class="type">date</span>) <span class="keyword">values</span> (&quot;mayday&quot;,<span class="number">98765</span>,now());</span><br><span class="line">       <span class="keyword">insert</span> <span class="keyword">into</span> test02 (name,count,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Lei&quot;,<span class="number">122</span>,now());</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> test02 (name,count,<span class="type">date</span>) <span class="keyword">values</span> (&quot;tay&quot;,<span class="number">12342</span>,now());</span><br></pre></td></tr></table></figure><hr><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>40</td><td>2022-09-08 08:22:23</td></tr><tr><td>2</td><td>Ashin</td><td>男</td><td>40</td><td>2022-09-08 08:22:23</td></tr><tr><td>3</td><td>Mayday</td><td>男</td><td>100</td><td>2022-09-08 08:22:23</td></tr><tr><td>4</td><td>friday</td><td>女</td><td>150</td><td>2022-09-08 08:22:23</td></tr><tr><td>5</td><td>Imaginedragons</td><td>男</td><td>60</td><td>2022-09-08 08:22:23</td></tr><tr><td>6</td><td>Leizi</td><td>男</td><td>33</td><td>2022-09-08 08:22:23</td></tr><tr><td>7</td><td>Taylor</td><td>女</td><td>28</td><td>2022-09-08 08:22:23</td></tr></tbody></table><hr><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>count</th><th>date</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>1234</td><td>2022-09-08 08:22:23</td></tr><tr><td>2</td><td>Ashin</td><td>1453</td><td>2022-09-08 08:22:23</td></tr><tr><td>3</td><td>mayday</td><td>98765</td><td>2022-09-08 08:22:23</td></tr><tr><td>4</td><td>Lei</td><td>122</td><td>2022-09-08 08:22:23</td></tr><tr><td>5</td><td>tay</td><td>12342</td><td>2022-09-08 08:22:23</td></tr></tbody></table><hr><blockquote><h2 id="UNION连接查询"><a href="#UNION连接查询" class="headerlink" title="UNION连接查询"></a>UNION连接查询</h2></blockquote><p><strong>Query #1</strong></p><p><code>union</code>默认去除重复数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> test01</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> test02;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>Jay</td></tr><tr><td>Ashin</td></tr><tr><td>Mayday</td></tr><tr><td>friday</td></tr><tr><td>Imaginedragons</td></tr><tr><td>Leizi</td></tr><tr><td>Taylor</td></tr><tr><td>Lei</td></tr><tr><td>tay</td></tr></tbody></table><hr><p><strong>Query #2</strong></p><p>如果显示所有数据，加上<code>all</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> test01</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> test02;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>Jay</td></tr><tr><td>Ashin</td></tr><tr><td>Mayday</td></tr><tr><td>friday</td></tr><tr><td>Imaginedragons</td></tr><tr><td>Leizi</td></tr><tr><td>Taylor</td></tr><tr><td>Jay</td></tr><tr><td>Ashin</td></tr><tr><td>mayday</td></tr><tr><td>Lei</td></tr><tr><td>tay</td></tr></tbody></table><hr><p><strong>Query #3</strong></p><p>多表查询切记<strong>列数相同</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> test01 <span class="keyword">where</span> age<span class="operator">&lt;</span><span class="number">45</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> name,count <span class="keyword">from</span> test02 <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%ay%&quot;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th><th>age</th></tr></thead><tbody><tr><td>Jay</td><td>40</td></tr><tr><td>Ashin</td><td>40</td></tr><tr><td>Leizi</td><td>33</td></tr><tr><td>Taylor</td><td>28</td></tr><tr><td>Jay</td><td>1234</td></tr><tr><td>mayday</td><td>98765</td></tr><tr><td>tay</td><td>12342</td></tr></tbody></table><hr><p><strong>Query #4</strong></p><p>去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="type">date</span> <span class="keyword">from</span> test01 <span class="keyword">where</span> age<span class="operator">&lt;</span><span class="number">45</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> name,<span class="type">date</span> <span class="keyword">from</span> test02 <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%ay%&quot;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th><th>date</th></tr></thead><tbody><tr><td>Jay</td><td>2022-09-08 08:22:23</td></tr><tr><td>Ashin</td><td>2022-09-08 08:22:23</td></tr><tr><td>Leizi</td><td>2022-09-08 08:22:23</td></tr><tr><td>Taylor</td><td>2022-09-08 08:22:23</td></tr><tr><td>mayday</td><td>2022-09-08 08:22:23</td></tr><tr><td>tay</td><td>2022-09-08 08:22:23</td></tr></tbody></table><hr><blockquote><h2 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h2></blockquote><p><strong>Query #1</strong></p><ol><li><p><code>asc</code>升序</p></li><li><p><code>desc</code>降序</p><p>默认<strong>升序排序</strong></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test01 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>7</td><td>Taylor</td><td>女</td><td>28</td><td>2022-09-08 08:45:05</td></tr><tr><td>6</td><td>Leizi</td><td>男</td><td>33</td><td>2022-09-08 08:45:05</td></tr><tr><td>1</td><td>Jay</td><td>男</td><td>40</td><td>2022-09-08 08:45:05</td></tr><tr><td>2</td><td>Ashin</td><td>男</td><td>40</td><td>2022-09-08 08:45:05</td></tr><tr><td>5</td><td>Imaginedragons</td><td>男</td><td>60</td><td>2022-09-08 08:45:05</td></tr><tr><td>3</td><td>Mayday</td><td>男</td><td>100</td><td>2022-09-08 08:45:05</td></tr><tr><td>4</td><td>friday</td><td>女</td><td>150</td><td>2022-09-08 08:45:05</td></tr></tbody></table><hr><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test02 <span class="keyword">order</span> <span class="keyword">by</span> count <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>count</th><th>date</th></tr></thead><tbody><tr><td>3</td><td>mayday</td><td>98765</td><td>2022-09-08 08:45:05</td></tr><tr><td>5</td><td>tay</td><td>12342</td><td>2022-09-08 08:45:05</td></tr><tr><td>2</td><td>Ashin</td><td>1453</td><td>2022-09-08 08:45:05</td></tr><tr><td>1</td><td>Jay</td><td>1234</td><td>2022-09-08 08:45:05</td></tr><tr><td>4</td><td>Lei</td><td>122</td><td>2022-09-08 08:45:05</td></tr></tbody></table><hr><blockquote><h2 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h2></blockquote><p>用到的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> table01(</span><br><span class="line">  id <span class="type">int</span> auto_increment,</span><br><span class="line">  name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  use_time <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id)</span><br><span class="line">  )engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Jay&quot;,&quot;男&quot;,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Tay&quot;,&quot;女&quot;,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Jay&quot;,&quot;男&quot;,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Jay&quot;,&quot;男&quot;,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Tay&quot;,&quot;女&quot;,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> table01 (name,sex,use_time) <span class="keyword">values</span>(&quot;Ashin&quot;,&quot;男&quot;,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><hr><p><strong>Query #1</strong></p><pre><code>select * from table01;</code></pre><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>use_time</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>3</td></tr><tr><td>2</td><td>Tay</td><td>女</td><td>2</td></tr><tr><td>3</td><td>Jay</td><td>男</td><td>3</td></tr><tr><td>4</td><td>Jay</td><td>男</td><td>3</td></tr><tr><td>5</td><td>Tay</td><td>女</td><td>2</td></tr><tr><td>6</td><td>Ashin</td><td>男</td><td>3</td></tr></tbody></table><hr><p><strong>Query #2</strong></p><p><code>count</code>函数统计名字出现次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> name_time <span class="keyword">from</span> table01 <span class="keyword">group</span> <span class="keyword">by</span> name;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th><th>name_time</th></tr></thead><tbody><tr><td>Ashin</td><td>1</td></tr><tr><td>Jay</td><td>3</td></tr><tr><td>Tay</td><td>2</td></tr></tbody></table><hr><p><strong>Query #3</strong></p><p><code>with roll up</code>在分组的情况进行<strong>进一步统计</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="built_in">sum</span>(use_time) <span class="keyword">as</span> sum_time <span class="keyword">from</span> table01 <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th><th>sum_time</th></tr></thead><tbody><tr><td>Ashin</td><td>3</td></tr><tr><td>Jay</td><td>9</td></tr><tr><td>Tay</td><td>4</td></tr><tr><td></td><td>16</td></tr></tbody></table><hr><p><strong>Query #4</strong></p><p>使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：</p><p><code>select coalesce(a,b,c);</code></p><p>参数说明：如果a&#x3D;&#x3D;null,则选择b；如果b&#x3D;&#x3D;null,则选择c；如果a!&#x3D;null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">coalesce</span>(name, <span class="string">&#x27;总数&#x27;</span>) name,<span class="built_in">sum</span>(use_time) <span class="keyword">as</span> sum_time <span class="keyword">from</span> table01 <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th><th>sum_time</th></tr></thead><tbody><tr><td>Ashin</td><td>3</td></tr><tr><td>Jay</td><td>9</td></tr><tr><td>Tay</td><td>4</td></tr><tr><td>总数</td><td>16</td></tr></tbody></table><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回捡MySQL计划第二天！</title>
      <link href="/2022/09/07/MySQL/Day02/"/>
      <url>/2022/09/07/MySQL/Day02/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> test(</span><br><span class="line">  id <span class="type">int</span> unsigned auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age <span class="type">int</span>,</span><br><span class="line">  <span class="type">date</span> datetime <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id)</span><br><span class="line">  )engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><hr><blockquote><h2 id="insert插入"><a href="#insert插入" class="headerlink" title="insert插入"></a>insert插入</h2></blockquote><p><strong>Query #1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> test (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Jay&quot;,&quot;男&quot;,<span class="number">40</span>,now());</span><br></pre></td></tr></table></figure><p>可以用<code>now（）</code>函数获取当前时间，并且注意字符类型要加<strong>双引号</strong></p><hr><p><strong>Query #2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> test (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;jay&quot;,<span class="string">&#x27;兄弟&#x27;</span>,&quot;20&quot;,now());</span><br></pre></td></tr></table></figure><p>可以用<code>now（）</code>函数获取当前时间，并且注意字符类型要加<strong>双引号</strong></p><hr><p><strong>Query #3</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> test (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;jay&quot;,<span class="string">&#x27;兄弟&#x27;</span>,&quot;30&quot;,now());</span><br></pre></td></tr></table></figure><p>可以用<code>now（）</code>函数获取当前时间，并且注意字符类型要加<strong>双引号</strong></p><hr><p><strong>Query #4</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> test (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;jay&quot;,<span class="string">&#x27;兄弟&#x27;</span>,&quot;22&quot;,now());</span><br></pre></td></tr></table></figure><hr><p><strong>Query #5</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> test (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;Mayday&quot;,<span class="string">&#x27;兄弟&#x27;</span>,&quot;20&quot;,now());</span><br></pre></td></tr></table></figure><hr><p><strong>Query #6</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> test (name,sex,age,<span class="type">date</span>) <span class="keyword">values</span> (&quot;zhaolei&quot;,<span class="string">&#x27;兄弟&#x27;</span>,&quot;30&quot;,now());</span><br></pre></td></tr></table></figure><hr><blockquote><h2 id="select查询"><a href="#select查询" class="headerlink" title="select查询"></a>select查询</h2></blockquote><p><strong>Query #7</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>40</td><td>2022-09-07 07:48:12</td></tr><tr><td>2</td><td>jay</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>3</td><td>jay</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr><tr><td>4</td><td>jay</td><td>兄弟</td><td>22</td><td>2022-09-07 07:48:12</td></tr><tr><td>5</td><td>Mayday</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>6</td><td>zhaolei</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr></tbody></table><hr><p><strong>Query #8</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> name<span class="operator">=</span>&quot;Jay&quot; limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>40</td><td>2022-09-07 07:48:12</td></tr></tbody></table><p><code>limit</code>后跟查询数量</p><hr><p><strong>Query #9</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> <span class="type">binary</span> name<span class="operator">=</span>&quot;mayday&quot;;</span><br></pre></td></tr></table></figure><p><code>binary</code>可以强制搜索结果区别<strong>大小写</strong></p><hr><p><strong>Query #10</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="type">date</span> <span class="keyword">from</span> test <span class="keyword">where</span> name<span class="operator">=</span>&quot;Mayday&quot; limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>name</th><th>date</th></tr></thead><tbody><tr><td>Mayday</td><td>2022-09-07 07:48:12</td></tr></tbody></table><hr><p><strong>Query #11</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%ay&quot;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>40</td><td>2022-09-07 07:48:12</td></tr><tr><td>2</td><td>jay</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>3</td><td>jay</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr><tr><td>4</td><td>jay</td><td>兄弟</td><td>22</td><td>2022-09-07 07:48:12</td></tr><tr><td>5</td><td>Mayday</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr></tbody></table><p>可以使用 <code>like</code>进行模糊查询，<code>%</code>匹配所有字符，<code>_</code>匹配单个字符，不同情况使用如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;%a&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>以a结尾的数据</span><br><span class="line"><span class="string">&#x27;a%&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>以a开头的数据</span><br><span class="line"><span class="string">&#x27;%a%&#x27;</span>    <span class="operator">/</span><span class="operator">/</span>含有a的数据</span><br><span class="line"><span class="string">&#x27;_a_&#x27;</span>    <span class="operator">/</span><span class="operator">/</span>三位且中间字母是a的</span><br><span class="line"><span class="string">&#x27;_a&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>两位且结尾字母是a的</span><br><span class="line"><span class="string">&#x27;a_&#x27;</span>     <span class="operator">/</span><span class="operator">/</span>两位且开头字母是a的</span><br></pre></td></tr></table></figure><hr><p><strong>Query #12</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> test <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%ay&quot; <span class="keyword">and</span> age<span class="operator">&lt;</span><span class="number">30</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>2</td><td>jay</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>4</td><td>jay</td><td>兄弟</td><td>22</td><td>2022-09-07 07:48:12</td></tr><tr><td>5</td><td>Mayday</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr></tbody></table><hr><p><strong>Query #13</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%ei&quot; <span class="keyword">or</span>  age<span class="operator">=</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>2</td><td>jay</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>5</td><td>Mayday</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>6</td><td>zhaolei</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr></tbody></table><p>使用<code>and 和 or</code>可实现条件查询</p><hr><blockquote><h2 id="update更新"><a href="#update更新" class="headerlink" title="update更新"></a>update更新</h2></blockquote><p><strong>Query #14</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> age<span class="operator">=</span><span class="number">30</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>更新数据</p><hr><p><strong>Query #15</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>40</td><td>2022-09-07 07:48:12</td></tr><tr><td>2</td><td>jay</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr><tr><td>3</td><td>jay</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr><tr><td>4</td><td>jay</td><td>兄弟</td><td>22</td><td>2022-09-07 07:48:12</td></tr><tr><td>5</td><td>Mayday</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>6</td><td>zhaolei</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr></tbody></table><hr><blockquote><h2 id="delete删除"><a href="#delete删除" class="headerlink" title="delete删除"></a>delete删除</h2></blockquote><p><strong>Query #16</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>删除数据</p><hr><p><strong>Query #17</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>age</th><th>date</th></tr></thead><tbody><tr><td>1</td><td>Jay</td><td>男</td><td>40</td><td>2022-09-07 07:48:12</td></tr><tr><td>3</td><td>jay</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr><tr><td>4</td><td>jay</td><td>兄弟</td><td>22</td><td>2022-09-07 07:48:12</td></tr><tr><td>5</td><td>Mayday</td><td>兄弟</td><td>20</td><td>2022-09-07 07:48:12</td></tr><tr><td>6</td><td>zhaolei</td><td>兄弟</td><td>30</td><td>2022-09-07 07:48:12</td></tr></tbody></table><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回捡MySQL计划第一天！</title>
      <link href="/2022/09/06/MySQL/Day01/"/>
      <url>/2022/09/06/MySQL/Day01/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="所有语句都基于数据库-test-表名table01"><a href="#所有语句都基于数据库-test-表名table01" class="headerlink" title="所有语句都基于数据库 test,表名table01"></a>所有语句都基于数据库 <code>test</code>,表名<code>table01</code></h2></blockquote><blockquote><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><blockquote><h3 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a><strong>数据库创建</strong></h3><p><code>create database test</code></p></blockquote><blockquote><h3 id="数据库删除"><a href="#数据库删除" class="headerlink" title="数据库删除"></a><strong>数据库删除</strong></h3><p><code>drop database test</code></p></blockquote><blockquote><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a><strong>选择数据库</strong></h3><p><code>use test</code></p></blockquote></blockquote><blockquote><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><blockquote><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> table01(</span><br><span class="line">  id <span class="type">int</span> unsigned auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(id)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>engine 设置存储引擎，charset 设置编码，unsigned表示非负，可以增加数据长度。</p></blockquote></blockquote><blockquote><blockquote><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p><code>drop table teable01</code></p></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组合总和二</title>
      <link href="/2022/07/18/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/%E7%BB%84%E5%90%88%E4%BA%8C/"/>
      <url>/2022/07/18/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/%E7%BB%84%E5%90%88%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用 一次 。</p><p>注意：解集不能包含重复的组合。 </p><p>示例 1:</p><p>输入: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,<br>输出:<br>[<br>[1,1,6],<br>[1,2,5],<br>[1,7],<br>[2,6]<br>]</p><p>示例 2:</p><p>输入: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,<br>输出:<br>[<br>[1,2,2],<br>[5]<br>]</p><p>力扣链接：<a href="https://leetcode.cn/problems/combination-sum-ii/">https://leetcode.cn/problems/combination-sum-ii/</a></p></blockquote></blockquote><blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>本题需要求出所有可能的组合，所以需要采用回溯法解决。</p><p>本题的难点如下：</p><ul><li><p>结果去重。</p></li><li><p>数组中的数不可重复使用，但数组中的数有重复。</p></li></ul><p>其实结果去重是最难的，如果不考虑超时，倒是可以用java提供的utile去重或者自己编写函数去重，但是力扣肯定通不过，所以得另寻他法。</p><p>依然要把这道题抽象成一棵树，以<code>candidates=[1,1,2],target=3</code>为例：</p><p><img src="/pictures/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/4.png"><br>抽象成树后就能懂为什么去重有难度了。</p></blockquote></blockquote><blockquote><blockquote><ol><li><p>递归函数参数</p><p>除了常规参数外，这里加入了一个used数组，这个数组的作用就是为了在回溯过程中完成去重的任务。</p><p>具体设置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; list2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">diff</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> index,<span class="type">boolean</span>[] used)</span></span><br></pre></td></tr></table></figure></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li><p>递归终止条件</p><p>终止条件就是当<code>sum=target</code>时就把<code>list1</code>加入到<code>list2</code>中，并且返回，剪枝可以<code>sum+candidates[i]&lt;=target</code>就行。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">     list2.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list1));</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li><p>单层搜索逻辑</p><p>这里的去重要放在树上理解，直接总结代码随想录的意思：要判断相同元素是同一树层上还是同一树枝上，<strong>如果是同一树枝上，就不用去重，如果是同一树层上，就需要去重</strong>。</p><p>重点：如果<code>candidates[i]==candidates[i-1]&amp;&amp;used[i-1]==false</code>,就说明前一树枝（同一树层）使用了相同的元素，此时应该跳过本层循环，也就是<code>continue</code>。总而言之在candidates[i]&#x3D;&#x3D;candidates[i-1]时：</p><ul><li><p>used[i-1]&#x3D;&#x3D;true，说明同一树枝上使用过candidates[i];</p></li><li><p>used[i-1]&#x3D;&#x3D;false，说明同一树层上使用过candidates[i];</p></li></ul><p>如下图：</p><p><img src="/pictures/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/5.png"><br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt; candidates.length&amp;&amp;candidates[i]+sum&lt;=target;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;candidates[i]==candidates[i-<span class="number">1</span>]&amp;&amp;!used[i-<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;<span class="comment">//如果第i个数和第i-1个数相同，并且标记位为false，那么表示是同一层有相同的数，跳过本次循环</span></span><br><span class="line">    <span class="comment">// used[i - 1] == true，说明同⼀树⽀candidates[i - 1]使⽤过</span></span><br><span class="line">    <span class="comment">// used[i - 1] == false，说明同⼀树层candidates[i - 1]使⽤过</span></span><br><span class="line">    sum+=candidates[i];</span><br><span class="line">    list1.add(candidates[i]);</span><br><span class="line">    used[i]=<span class="literal">true</span>;</span><br><span class="line">    diff(candidates,target,i+<span class="number">1</span>,used);</span><br><span class="line">    used[i]=<span class="literal">false</span>;  <span class="comment">//回溯</span></span><br><span class="line">    sum-=candidates[i];</span><br><span class="line">    list1.remove(list1.size()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法.回溯算法;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> havefun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/12-13:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 组合总和二 &#123;</span><br><span class="line">    List&lt;Integer&gt; list1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] candidates=&#123;<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="type">int</span> target=<span class="number">8</span>;</span><br><span class="line">        组合总和二 two=<span class="keyword">new</span> 组合总和二();</span><br><span class="line">        System.out.println(two.combinationSum2(candidates,target));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);<span class="comment">//1,1,2,2,5,6,7,10</span></span><br><span class="line">        <span class="type">boolean</span>[] used=<span class="keyword">new</span> <span class="title class_">boolean</span>[candidates.length];</span><br><span class="line">        Arrays.fill(used,<span class="literal">false</span>);</span><br><span class="line">        diff(candidates,target,<span class="number">0</span>,used);</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">diff</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> index,<span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line"><span class="comment">/*            if(!list2.contains(list1))&#123;</span></span><br><span class="line"><span class="comment">                list2.add(new ArrayList&lt;&gt;(list1));</span></span><br><span class="line"><span class="comment">            &#125;    超时*/</span></span><br><span class="line">            list2.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list1));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt; candidates.length&amp;&amp;candidates[i]+sum&lt;=target;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;candidates[i]==candidates[i-<span class="number">1</span>]&amp;&amp;!used[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="comment">//如果第i个数和第i-1个数相同，并且标记位为false，那么表示是同一层有相同的数，跳过本次循环</span></span><br><span class="line">            <span class="comment">// used[i - 1] == true，说明同⼀树⽀candidates[i - 1]使⽤过</span></span><br><span class="line">            <span class="comment">// used[i - 1] == false，说明同⼀树层candidates[i - 1]使⽤过</span></span><br><span class="line">            sum+=candidates[i];</span><br><span class="line">            list1.add(candidates[i]);</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            diff(candidates,target,i+<span class="number">1</span>,used);</span><br><span class="line">            used[i]=<span class="literal">false</span>;  <span class="comment">//回溯</span></span><br><span class="line">            sum-=candidates[i];</span><br><span class="line">            list1.remove(list1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/6.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>完全平方数</title>
      <link href="/2022/07/18/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
      <url>/2022/07/18/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。</p><p>完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。</p><p>示例 1：</p><p>输入：n &#x3D; 12<br>输出：3<br>解释：12 &#x3D; 4 + 4 + 4</p><p>示例 2：</p><p>输入：n &#x3D; 13<br>输出：2<br>解释：13 &#x3D; 4 + 9</p><p>力扣链接：<a href="https://leetcode.cn/problems/perfect-squares/">https://leetcode.cn/problems/perfect-squares/</a></p></blockquote></blockquote><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><p>完全平方数作为物品，正整数n就是背包，完全平方数可以重复使用，所以这是一个完全背包问题。</p></blockquote></blockquote><blockquote><blockquote><ol><li><p>确定dp数组及下标含义</p><p>dp[i]:和为i的完全平方数的最少数量为dp[i]。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li><p>递推公式</p><p>dp[j]可以由两个方面推导而来</p><ul><li><p>不包含i时的完全平方数个数，即dp[j];</p></li><li><p>包含i时的完全平方数个数，即dp[j-i]+1;</p></li></ul><p>因为要最少的个数，综上，递推公式为：</p><p><code>dp[j]=Math.min(dp[j],dp[j-i]+1)</code></p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li><p>dp数组初始化</p><p>首先因为每个数最多有n个完全平方数，即n个1，所以都初始化为n（都初始化为0的话，那就最后结果也都只会是0，看递推公式很好理解），其次需将dp[0]初始化为0，因为按给定的条件不包括0。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li><p>确定遍历顺序</p><p>因为这里无所谓排列数还是组合数，所以无论先遍历谁都可以，我习惯先物品再遍历背包。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="5"><li><p>举例n&#x3D;5时dp数组的变化</p><p><img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/7.jpg"></p></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><p>按理来说到这里就结束了，但还有一步就是要判断完全平方数，有的比较精简的可读性稍差，这里贴我的，虽然冗长了点，但好理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 完全平方数 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">13</span>;</span><br><span class="line">        numSquares(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];  <span class="comment">//元素j中含有的最少完全平方数个数</span></span><br><span class="line">        Arrays.fill(dp,n);    <span class="comment">//任何数都含有最多n个完全平方数</span></span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;  <span class="comment">//遍历物品</span></span><br><span class="line">            <span class="type">double</span> a=Math.sqrt(i);</span><br><span class="line">            <span class="type">int</span> b=(<span class="type">int</span>) a;<span class="comment">//判断完全平方数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)&#123;   <span class="comment">//遍历背包</span></span><br><span class="line">                <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">                    dp[j]=Math.min(dp[j],dp[j-i]+<span class="number">1</span>);</span><br><span class="line">                    System.out.print(<span class="string">&quot;dp[&quot;</span>+j+<span class="string">&quot;]=&quot;</span>+dp[j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单词拆分</title>
      <link href="/2022/07/18/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
      <url>/2022/07/18/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>给你一个字符串 s 和一个字符串列表 wordDict 作为字典。请你判断是否可以利用字典中出现的单词拼接出 s 。</p><p>注意：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p><p>示例 1：</p><p>输入: s &#x3D; “leetcode”, wordDict &#x3D; [“leet”, “code”]<br>输出: true<br>解释: 返回 true 因为 “leetcode” 可以由 “leet” 和 “code” 拼接成。</p><p>示例 2：</p><p>输入: s &#x3D; “applepenapple”, wordDict &#x3D; [“apple”, “pen”]<br>输出: true<br>解释: 返回 true 因为 “applepenapple” 可以由 “apple” “pen” “apple” 拼接成。<br>     注意，你可以重复使用字典中的单词。</p><p>示例 3：</p><p>输入: s &#x3D; “catsandog”, wordDict &#x3D; [“cats”, “dog”, “sand”, “and”, “cat”]<br>输出: false</p><p>力扣链接：<a href="https://leetcode.cn/problems/word-break/">https://leetcode.cn/problems/word-break/</a></p></blockquote></blockquote><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><p>首先明确本题中<strong>字符串s是背包，单词是物品</strong>，单词可以重复使用，所以这是个完全背包问题。</p></blockquote></blockquote><blockquote><blockquote><ol><li><p>确定dp数组以及下标含义</p><p>dp[i]:字符串长度为i时，如果dp[i]为<code>true</code>，表示i之前的字符串可以拆分成一个或多个单词字典中出现的单词。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li><p>确定递推公式</p><p>如果<code>dp[j]==true</code>，并且如果<code>[j,i]</code>中的单词出现在字典中，那么<code>dp[i]==true</code>；</p><p>所以递推公式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word=s.substring(j,i);</span><br><span class="line"><span class="keyword">if</span>(dp[j]&amp;&amp;wordDict.contains(word))&#123;</span><br><span class="line">      dp[i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li><p>dp数组初始化</p><p>首先一个字符串是由很多单词组成，只有每个单词的开始才可能会是true，其他下标位置都是false，所以这里首先都初始化为<code>false</code></p><p>但是下标0如果为false，那么根据递推公式可知后面都为false，所以将<code>dp[0]=true</code></p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li><p>确定遍历顺序</p><p>理论上来说，这道题无所谓组合数还是排列数，所以先遍历谁都可以，但是这里为了好理解，将字典放入字符串中比较，<strong>先遍历字符串（背包），再遍历字典（物品）</strong>。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="5"><li><p>举例推导</p><p>有点潦草，但是这个随便找个用例，把下标标出来推导下就很快能懂了，我的如下：</p><p><img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/6.jpg"></p></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 单词拆分_test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String s=<span class="string">&quot;applepenapple&quot;</span>;</span><br><span class="line">        List&lt;String&gt; wordDict=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        wordDict.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        wordDict.add(<span class="string">&quot;pen&quot;</span>);</span><br><span class="line">        method(s,wordDict);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(String s, List&lt;String&gt; wordDict)</span>&#123;</span><br><span class="line">        Boolean[] dp=<span class="keyword">new</span> <span class="title class_">Boolean</span>[s.length()+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp,<span class="literal">false</span>);</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">        String word;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                word=s.substring(j,i);</span><br><span class="line">                <span class="keyword">if</span>(dp[j]&amp;&amp;wordDict.contains(word))&#123;</span><br><span class="line">                    dp[i]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[s.length()]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>0-1背包和完全背包总结</title>
      <link href="/2022/07/12/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/"/>
      <url>/2022/07/12/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/4.png"></p></blockquote><blockquote><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>我这里把目前学到的背包问题做了下大致归纳，如下：</p><blockquote><h3 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h3><ol><li><p><strong>组合类问题</strong></p><p>一般问题求解：有几种方式？有几种情况？</p><p>此时递推公式为：</p><p><code>dp[j]+=dp[j-weight[i]]</code></p><p>初始化一般为：</p><p><code>dp[0]=1</code></p></li><li><p><strong>纯0-1背包问题（我称为‘中间态问题’）</strong></p><p>一般问题求解：是否能？或者dp数组某个下标下的值？</p><p>此时递推公式一般为：</p><p><code>dp[j]=max(dp[j],dp[j-weight[i]]+value[i])</code></p><p>一般都初始化为0，但还是要视具体题目而定。</p></li></ol><h4 id="一维数组和二维数组"><a href="#一维数组和二维数组" class="headerlink" title="一维数组和二维数组"></a>一维数组和二维数组</h4><ol><li><p><strong>二维数组</strong></p><p>遍历背包和遍历物品顺序可变，因为每一次存放的dp值不会被覆盖。</p></li><li><p><strong>一维数组</strong></p><p>遍历背包和遍历物品顺序不可变，首先因为每次都在修正历史状态的dp值，会被覆盖掉，其次内层遍历背包容量使倒叙遍历，如果放外层，相当于每次只放一个物品到背包中。</p><p>为什么倒序遍历背包容量？因为0-1背包中物品个数有限，可以确保将每个物品只放入背包一次。</p></li></ol></blockquote></blockquote><blockquote><blockquote><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p>完全背包问题中，物品有无限个，可以被放入多次，所以此时<strong>遍历背包是正序遍历。</strong></p><ol><li><p><strong>纯完全背包问题</strong></p><p>一般问题求解如0-1背包，不再赘述。</p><p>此时递推公式一般为：</p><p><code>dp[j]=max(dp[j],dp[j-weight[i]]+value[i])</code></p><p>一般都初始化为0，但还是要视具体题目而定。</p></li><li><p><strong>组合类问题</strong></p><p>此时递推公式为：</p><p><code>dp[j]+=dp[j-weight[i]]</code></p><p>初始化一般为：</p><p><code>dp[0]=1</code></p><ul><li><p>组合数</p><p>组合数表示相同的数值不同的排序是同一种情况，此时<strong>先遍历物品再遍历背包。</strong></p></li><li><p>排列数</p><p>排列数表示数值相同但排列结果不同，情况也不同，此时<strong>先遍历背包再遍历物品。</strong></p></li></ul></li></ol></blockquote></blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/4.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>杜绝摆烂 从我做起༼༎ຶᴗ༎ຶ༽</title>
      <link href="/2022/07/11/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/"/>
      <url>/2022/07/11/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="直接上图了…-…"><a href="#直接上图了…-…" class="headerlink" title="直接上图了… …"></a>直接上图了… …</h1></blockquote><blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/1.png"></p></blockquote><blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/2.png"></p></blockquote><blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/3.png"></p></blockquote><blockquote><blockquote><h3 id="啥都不说了，算我求求自己了，务必好好执行！！！"><a href="#啥都不说了，算我求求自己了，务必好好执行！！！" class="headerlink" title="啥都不说了，算我求求自己了，务必好好执行！！！"></a>啥都不说了，算我求求自己了，务必好好执行！！！</h3><h3 id="一天至少6钟头，除了个别事情偶尔耽误，下跪三拜自己一定要好好落实，6钟头好吧，务必牢记！！！"><a href="#一天至少6钟头，除了个别事情偶尔耽误，下跪三拜自己一定要好好落实，6钟头好吧，务必牢记！！！" class="headerlink" title="一天至少6钟头，除了个别事情偶尔耽误，下跪三拜自己一定要好好落实，6钟头好吧，务必牢记！！！"></a>一天至少6钟头，除了个别事情偶尔耽误，下跪三拜自己一定要好好落实，6钟头好吧，务必牢记！！！</h3><h3 id="还有，哥，记住你现在是一个连方向的都没有的人，所以暑假一定要把出论文排在所有事的NO-1！！！"><a href="#还有，哥，记住你现在是一个连方向的都没有的人，所以暑假一定要把出论文排在所有事的NO-1！！！" class="headerlink" title="还有，哥，记住你现在是一个连方向的都没有的人，所以暑假一定要把出论文排在所有事的NO.1！！！"></a>还有，哥，记住你现在是一个连方向的都没有的人，所以暑假一定要把出论文排在所有事的NO.1！！！</h3></blockquote></blockquote><blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/5.jpg"></p><h1 id="6小时！！！！！！！！！！！！！"><a href="#6小时！！！！！！！！！！！！！" class="headerlink" title="6小时！！！！！！！！！！！！！"></a>6小时！！！！！！！！！！！！！</h1><h1 id="6小时！！！！！！！！！！！！！-1"><a href="#6小时！！！！！！！！！！！！！-1" class="headerlink" title="6小时！！！！！！！！！！！！！"></a>6小时！！！！！！！！！！！！！</h1><h1 id="6小时！！！！！！！！！！！！！-2"><a href="#6小时！！！！！！！！！！！！！-2" class="headerlink" title="6小时！！！！！！！！！！！！！"></a>6小时！！！！！！！！！！！！！</h1></blockquote><blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/4.jpg"></p><h1 id="杜绝摆烂-从我做起！！！！！"><a href="#杜绝摆烂-从我做起！！！！！" class="headerlink" title="杜绝摆烂 从我做起！！！！！"></a>杜绝摆烂 从我做起！！！！！</h1><h1 id="杜绝摆烂-从我做起！！！！！-1"><a href="#杜绝摆烂-从我做起！！！！！-1" class="headerlink" title="杜绝摆烂 从我做起！！！！！"></a>杜绝摆烂 从我做起！！！！！</h1><h1 id="杜绝摆烂-从我做起！！！！！-2"><a href="#杜绝摆烂-从我做起！！！！！-2" class="headerlink" title="杜绝摆烂 从我做起！！！！！"></a>杜绝摆烂 从我做起！！！！！</h1></blockquote><p><img src="/pictures/%E6%9A%91%E5%81%87%E8%AE%A1%E5%88%92/6.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一和零</title>
      <link href="/2022/07/10/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%80%E5%92%8C%E9%9B%B6/"/>
      <url>/2022/07/10/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%80%E5%92%8C%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p><p>请你找出并返回 strs 的最大子集的长度，该子集中 最多 有 m 个 0 和 n 个 1 。</p><p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p><p>示例 1：</p><p>输入：strs &#x3D; [“10”, “0001”, “111001”, “1”, “0”], m &#x3D; 5, n &#x3D; 3<br>输出：4<br>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,”0001”,”1”,”0”} ，因此答案是 4 。<br>其他满足题意但较小的子集包括 {“0001”,”1”} 和 {“10”,”1”,”0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p><p>示例 2：</p><p>输入：strs &#x3D; [“10”, “0”, “1”], m &#x3D; 1, n &#x3D; 1<br>输出：2<br>解释：最大的子集是 {“0”, “1”} ，所以答案是 2 。</p><p>力扣链接：<a href="https://leetcode.cn/problems/ones-and-zeroes/">https://leetcode.cn/problems/ones-and-zeroes/</a></p></blockquote></blockquote><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><p>初看不会，再看还是不会…..</p><p>但是隐约觉得m和n在里面就是背包容量。所以哪个是背包容量？两个都是！</p></blockquote></blockquote><blockquote><blockquote><ol><li><p>确定dp数组含义</p><p>dp[i][j]:最多有i个0和j个1的数组中的最大子集个数为dp[i][j]。真绕啊…</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li><p>确定递推公式</p><p>dp[i][j]可以由前一个strs数组里的字符串推导而来，每个字符串有<code>zero</code>个0，<code>one</code>个1。</p><p>所以参考以前的背包问题可得：</p><p><code>dp[i][j]=dp[i-zero][j-one]+1</code></p><p>如果不放入该字符串，则：</p><p><code>dp[i][j]=dp[i][j]</code></p><p>所以递推公式为：</p><p><code>dp[i][j]=Math.max(dp[i][j],dp[i-zero][j-one]+1)</code></p><p>这里的<code>zero</code>和<code>one</code>就是物品质量，<code>1</code>就是物品价值。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li><p>dp数组初始化</p><p>物品价值不会是负数，所以都初始化为0就好了。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li><p>确定遍历顺序</p><p>依然中规中矩，遍历物品那层必须在外面，遍历背包容量那两层必须在里面，这个是不可以变得，之前有说过，因为遍历背包是逆序的。但是里面两层背包的遍历顺序可以随意。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="5"><li><p>举例推导dp数组</p><p>我还有些蒙的，把打印结果放下面吧：</p><p><img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/5.png"></p></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 一和零_test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] strs=&#123;<span class="string">&quot;10&quot;</span>, <span class="string">&quot;0001&quot;</span>, <span class="string">&quot;111001&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">        findMaxForm(strs,m,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strs.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> zero=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> one=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;strs[i].length();l++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[i].charAt(l)==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    one++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    zero++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(strs[i]+<span class="string">&quot;=zero---&gt;&quot;</span>+zero+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;one---&gt;&quot;</span>+one);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j1=m;j1&gt;=zero;j1--)&#123;  <span class="comment">//背包0</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j2=n;j2&gt;=one;j2--)&#123;    <span class="comment">//背包1</span></span><br><span class="line">                    dp[j1][j2]=Math.max(dp[j1][j2],dp[j1-zero][j2-one]+<span class="number">1</span>);</span><br><span class="line">                    System.out.print(<span class="string">&quot;dp[&quot;</span>+j1+<span class="string">&quot;]&quot;</span>+<span class="string">&quot;[&quot;</span>+j2+<span class="string">&quot;]&quot;</span>+<span class="string">&quot;=&quot;</span>+dp[j1][j2]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[m][n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习（一）</title>
      <link href="/2022/07/02/Git(1)/"/>
      <url>/2022/07/02/Git(1)/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="远程数据库和本地数据库"><a href="#远程数据库和本地数据库" class="headerlink" title="远程数据库和本地数据库"></a>远程数据库和本地数据库</h2><blockquote><ul><li><p><strong>远程数据库</strong>：配有专用的服务器，为了多人共享而建立的数据库。</p></li><li><p><strong>本地数据库</strong>：为了方便用户个人使用，在自己的机器上配置的数据库。</p></li></ul></blockquote></blockquote><blockquote><h2 id="修改记录的提交"><a href="#修改记录的提交" class="headerlink" title="修改记录的提交"></a>修改记录的提交</h2><blockquote><p>要把文件或目录的添加和变更保存到数据库，就需要进行提交。执行提交后，数据库中会生成上次提交的状态与当前状态的差异记录（也被称为revision）。</p><p><img src="/../pictures/Git/1.png"><strong>注意</strong></p><ul><li><p>不同类别的修改 (如：Bug修复和功能添加) 要尽量分开提交，以方便以后从历史记录里查找特定的修改内容。</p></li><li><p>查看其他人提交的修改内容或自己的历史记录的时候，提交信息是需要用到的重要资料。所以请用心填写修改内容的提交信息，以方便别人理解。<br>以下是Git的标准注解：</p></li><li><pre><code class="java">第1行：提交修改内容的摘要第2行：空行第3行以后：修改的理由</code></pre></li></ul></blockquote></blockquote><blockquote><h2 id="工作树和索引"><a href="#工作树和索引" class="headerlink" title="工作树和索引"></a>工作树和索引</h2><p>Git在执行提交的时候，不是直接将工作树的状态保存到数据库，而是将设置在中间<strong>索引</strong>区域的状态保存到数据库。</p><p><img src="/../pictures/Git/2.png"></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>目标和</title>
      <link href="/2022/06/28/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
      <url>/2022/06/28/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>给你一个整数数组 nums 和一个整数 target 。</p><p>向数组中的每个整数前添加 ‘+’ 或 ‘-‘ ，然后串联起所有整数，可以构造一个 表达式 ：</p><ul><li>例如，nums &#x3D; [2, 1] ，可以在 2 之前添加 ‘+’ ，在 1 之前添加 ‘-‘ ，然后串联起来得到表达式 “+2-1” 。<br>返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。</li></ul><p>示例 1：</p><p>输入：nums &#x3D; [1,1,1,1,1], target &#x3D; 3<br>输出：5<br>解释：一共有 5 种方法让最终目标和为 3 。<br>-1 + 1 + 1 + 1 + 1 &#x3D; 3<br>+1 - 1 + 1 + 1 + 1 &#x3D; 3<br>+1 + 1 - 1 + 1 + 1 &#x3D; 3<br>+1 + 1 + 1 - 1 + 1 &#x3D; 3<br>+1 + 1 + 1 + 1 - 1 &#x3D; 3</p><p>示例 2：</p><p>输入：nums &#x3D; [1], target &#x3D; 1<br>输出：1</p><p>力扣链接：<a href="https://leetcode.cn/problems/target-sum/">https://leetcode.cn/problems/target-sum/</a></p></blockquote></blockquote><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><p>这道题硬做是难的，可以通过暴力搜索的方式，但是时间复杂度会超。</p><p>因为我们最后目标是要得到<code>target</code>，所以要想办法去变换题目思路找出什么是背包容量什么是物品重量。</p><p>在这里，所有数字总和为<code>sum</code>，而数字前符号为<code>+</code>的总和设为<code>plus</code>，则数字前符号为<code>-</code>的总和为<code>sum-plus</code>，所以可得：<code>target=plus-（sum-plus）</code></p><p>变形一下可得：<code>plus=（target+sum）/2</code>，此时<code>plus</code>则是我们需要的背包容量。</p><p>当然背包容量不可能为小数，所以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((sum+target)%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>其次所有数的总和也不可能小于<code>target</code>的绝对值，所以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Math.abs(target)&gt;sum)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>我开始到这还不明白，但仔细想一下，这不就是从<code>nums</code>数组中放东西到容量为<code>plus</code>的背包中，然后看有几种方式可以凑成数字前符号为<code>+</code>的数字总和即<code>plus</code>吗？</strong></p></blockquote></blockquote><blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote><p>以上都明确了，后面就可以按动规五部曲走了</p><ol><li><p><strong>确定dp数组含义</strong></p><p>dp[j]：装满容量为j的背包有dp[j]种方法。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li><p><strong>确定递推公式</strong></p><p>这里要提一下，问题是要求有几种方式，和以往求某个中间态的数值不一样，所以递推公式略有不同。这里递推公式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j]+=dp[j-nums[i]</span><br></pre></td></tr></table></figure><p>这里只需要记住：</p><p><strong>以后求组合个数的问题，就是这种递推公式，如果要把每种情况都罗列出来没办法用动态规划，只能回溯暴力搜索出。</strong></p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li><p><strong>dp数组初始化</strong></p><p>要将<code>dp[0]=1</code>，首先是因为如果不赋予一个初始值的话，后面所有情况得出的值都是0，其次很好理解，装满容量为0的背包只有一种方法，就是啥都不装。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li><p><strong>确定遍历顺序</strong></p><p>不多说了，典型的0-1背包问题，先遍历物品再遍历背包。</p><p><strong>后面会针对0-1背包和完全背包以及组合数和排列数做一下总结。</strong></p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="5"><li><p><strong>举例推导dp数组</strong></p><p>略</p></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 目标和_test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> target=<span class="number">1</span>;</span><br><span class="line">        findTargetSumWays(nums,target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> plus;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n: nums)&#123;</span><br><span class="line">            sum+=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum+target)%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(target)&gt;sum)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        plus=(sum+target)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[plus+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; nums.length;i++)&#123;   <span class="comment">//物品</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=plus;j&gt;=nums[i];j--)&#123;   <span class="comment">//背包</span></span><br><span class="line">                dp[j]+=dp[j-nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[plus]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最后一块石头的重量</title>
      <link href="/2022/06/26/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/"/>
      <url>/2022/06/26/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。</p><p>每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;&#x3D; y。那么粉碎的可能结果如下：</p><p>如果 x &#x3D;&#x3D; y，那么两块石头都会被完全粉碎；<br>如果 x !&#x3D; y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。<br>最后，<strong>最多只会剩下一块</strong>石头。返回此石头<strong>最小的可能重量</strong>。如果没有石头剩下，就返回 0。</p><p>示例 1：</p><p>输入：stones &#x3D; [2,7,4,1,8,1]<br>输出：1<br>解释：<br>组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，<br>组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，<br>组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，<br>组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</p><p>示例 2：</p><p>输入：stones &#x3D; [31,26,33,21,40]<br>输出：5</p><p>力扣链接：<a href="https://leetcode.cn/problems/last-stone-weight-ii/">https://leetcode.cn/problems/last-stone-weight-ii/</a></p></blockquote></blockquote><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><p>首先要分析一下这道题，简化一下这道题的问题。题目那么长，总结到底就是说如何<strong>将一堆石头分为重量最接近的两堆</strong>。</p><p>明确这个后就可以按动规五部曲进行分析了。</p></blockquote></blockquote><blockquote><blockquote><ol><li><p>确定dp数组含义</p><p><code>dp[j]</code>可以表示为容量为<code>j</code>的背包中最多可以装的石头重量。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li><p>确定递推公式</p><p>直接套用0-1背包的公式，<code>dp[j]</code>可由以下两处推导而来：</p><ul><li><p>不放石头i时的背包重量，即<code>dp[j]</code></p></li><li><p>放入石头i时的背包重量，即<code>dp[j-stones[i]]+stones[i]</code></p></li></ul><p>综上递推公式为：</p><p><code>dp[j]=Math.max(dp[j],dp[j-stones[i]]+stones[i])</code></p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li><p>dp数组初始化</p><p>因为重量不会是负值，所以我的习惯是默认都赋值为0就好了。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li><p>遍历顺序</p><p>中规中矩，先遍历物品，再遍历背包，这里物品石头。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; stones.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=sum;j&gt;=stones[i];j--)&#123;</span><br><span class="line">                dp[j]=Math.max(dp[j],dp[j-stones[i]]+stones[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="5"><li><p>举例推导dp数组</p><p>我的习惯是在纸上先推导第一轮，再用IDEA打印验证推导，因为dp数组开始没有赋值，初始值就为0了。</p><p><img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/3.png"></p></li></ol></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><p>推导出dp数组后，再想一下为啥要推出dp数组。</p><p>开始分析说过，就是为把石头分成重量最相似的两堆，所以其中一堆是<code>dp[sum/2]</code>,其中一堆是<code>sum-dp[sum/2]</code>。</p><p>因为<code>sum/2</code>是向下取整，所以<code>sum-dp[sum/2]-dp[sum/2]</code>一定大于0，但我还是用了一个绝对值函数。</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test_LastStone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] stones=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        LastStone(stones);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">LastStone</span><span class="params">(<span class="type">int</span>[] stones)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s:stones)&#123;</span><br><span class="line">            sum+=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; stones.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=sum;j&gt;=stones[i];j--)&#123;</span><br><span class="line">                dp[j]=Math.max(dp[j],dp[j-stones[i]]+stones[i]);</span><br><span class="line">                System.out.print(dp[j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组合问题</title>
      <link href="/2022/06/24/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/%E7%BB%84%E5%90%88/"/>
      <url>/2022/06/24/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p>示例 1：</p><p>输入：n &#x3D; 4, k &#x3D; 2<br>输出：<br>[<br>  [2,4],<br>  [3,4],<br>  [2,3],<br>  [1,2],<br>  [1,3],<br>  [1,4],<br>]</p><p>示例 2：</p><p>输入：n &#x3D; 1, k &#x3D; 1<br>输出：[[1]]</p><p><strong>力扣链接：</strong> <a href="https://leetcode.cn/problems/combinations/">https://leetcode.cn/problems/combinations/</a></p></blockquote></blockquote><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><p><strong>回溯问题</strong>最重要的就是要把问题抽象成一颗<strong>N叉树</strong>。这道题可以抽象成如下的一棵树：</p><p><img src="/pictures/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/1.png"></p></blockquote></blockquote><blockquote><blockquote><p><strong>1. 确定函数返回值以及函数参数</strong></p><p>根据力扣给的代码格式，很容易可知函数的返回值，并且返回值中的泛型类型也是list集合，所以可知，一个存放最终返回结果，一个存放每次的单一结果，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//每次的结果</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; list2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//返回结果</span></span><br></pre></td></tr></table></figure><p>这里为了减少函数中的参数个数，选择将其作为全局变量。</p><p><strong>函数参数</strong>：除了题目给出的<code>n</code>和<code>k</code>外，还要考虑一个<code>index</code>来记录本次递归从哪里开始。因此所有参数有<code>n,k,index</code>。</p></blockquote></blockquote><blockquote><blockquote><p><strong>2. 回溯函数的终止条件</strong></p><p>这里逻辑很简单，其实就是，每次取得的结果<code>list1</code>已经取得了<code>k</code>个数后，则本次递归结束，<code>return</code>就好。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(list1.size()==k)&#123;</span><br><span class="line">           list2.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list1));<span class="comment">//new一个新的集合，并且进行拷贝</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>这里重点说明下</strong>：<strong>为什么代码块中不能写成</strong><code>list2.add(list1)</code>？</p><p><strong>因为通俗点说就是，list集合共用一个内存地址，一个变则所有变，所以需要new一个新的集合再进行拷贝。常规数据类型不会存在这种问题是因为常规数据类型会自动装箱。</strong></p><p>这里是写这道题时踩得大坑，希望注意！</p></blockquote></blockquote><blockquote><blockquote><p><strong>3. 单层搜索的过程</strong></p><p>以下这张图很形象了我觉得，横向代表for循环，纵向代表递归</p><p><img src="/pictures/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=n;i++)&#123;</span><br><span class="line">            list1.add(i);</span><br><span class="line">            diff(n,k,i+<span class="number">1</span>);</span><br><span class="line">            list1.remove(list1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 组合 &#123;</span><br><span class="line">    List&lt;Integer&gt; list1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">2</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; l=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        组合 z=<span class="keyword">new</span> 组合();</span><br><span class="line">        l=z.combine(n,k);</span><br><span class="line">        System.out.println(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        diff(n,k,<span class="number">1</span>);</span><br><span class="line">        System.out.println(list2);</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">diff</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1.size()==k)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 重点：list2.add(list1) 不可取，因为list集合共用一个内存地址，一个变则所有变，所以需要new一个新的集合再进行拷贝</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            list2.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list1));<span class="comment">//new一个新的集合，并且进行拷贝</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=n;i++)&#123;</span><br><span class="line">            list1.add(i);</span><br><span class="line">            diff(n,k,i+<span class="number">1</span>);</span><br><span class="line">            list1.remove(list1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><h2 id="优化——剪枝"><a href="#优化——剪枝" class="headerlink" title="优化——剪枝"></a>优化——剪枝</h2><blockquote><p>意思就是有的遍历没必要进行了，很好理解，这里直接放卡尔大哥的图了：</p><p><img src="/pictures/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/3.png"><br>剪枝需要在每层for循环遍历的位置做手脚，也就是这段代码位置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=n;i++)&#123;</span><br><span class="line">            list1.add(i);</span><br><span class="line">            diff(n,k,i+<span class="number">1</span>);</span><br><span class="line">            list1.remove(list1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><ol><li><p>已经选择元素的个数：list1.size（）；</p></li><li><p>还需要选择元素的个数：k-list1.size（）；</p></li><li><p>所以集合中最多只能从：n-（k-list1.size（））+1开始遍历</p></li></ol></blockquote></blockquote><blockquote><blockquote><p>所以只需要优化循环里面的<code>n</code>即可，优化代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=n-(k-list1.size())+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            list1.add(i);</span><br><span class="line">            diff(n,k,i+<span class="number">1</span>);</span><br><span class="line">            list1.remove(list1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>背包问题——滚动数组</title>
      <link href="/2022/06/23/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98_%E6%BB%9A%E5%8A%A8%E6%95%B0%E7%BB%84/"/>
      <url>/2022/06/23/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98_%E6%BB%9A%E5%8A%A8%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote><p><strong>有N件物品和⼀个最多能被重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i]。每件物品只能⽤⼀次，求解将哪些物品装⼊背包⾥物品价值总和最⼤。</strong></p></blockquote></blockquote><blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><strong>背包最大重量：4</strong></p><table><thead><tr><th align="center"></th><th align="center">重量</th><th align="center">价值</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">1</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">3</td><td align="center">20</td></tr><tr><td align="center">物品2</td><td align="center">4</td><td align="center">30</td></tr></tbody></table></blockquote><p><img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1.png" alt="1"></p><hr><p><strong>解决同一个问题，只不过这次压缩二维数组的状态，只使用一维数组。依然是以下动规五部曲。</strong></p><hr><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><ol><li><p><strong>确定dp数组含义</strong></p><p>一维数组中，<strong>dp[j]</strong> 表示，在容量为j的背包中，物品最大价值总和。</p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="2"><li><p><strong>确定递推公式</strong></p><ul><li><p><strong>不放物品i</strong>：意思就是当前容量背包的最大物品价值就是上一状态容量背包的最大价值，理解为不放物品i，即 <code>dp[j]=dp[j]</code></p></li><li><p><strong>放物品i</strong>：意思就是容量为<code>j-weight[i]</code>的背包中放入物品<code>i</code>,即<code>dp[j]=dp[j-weight[i]+value[i]</code></p></li></ul><p>两者取最大值，即：</p><p><code>dp[j]=MAX(dp[j],dp[j-weight[i]+value[i])</code></p></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="3"><li><strong>dp数组初始化</strong><ul><li><code>dp[0]</code> 初始化为0</li><li>因为物品价值均为正数，所以均初始化为0即可，如果有负数就应该视情况而定了。</li></ul></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="4"><li><p><strong>确定遍历顺序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weight.size(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> bagWeight; j &gt;= weight[i]; j--) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历顺序是 <strong>先遍历物品，再遍历背包</strong></p><ul><li><p><strong>问题一：为什么第二层循环倒叙？</strong></p><p>如果进行手动推导，可以发现，如果正序遍历，则每次都会重复加上前一状态的值倒叙遍历可以避免出现这样的状况。</p></li><li><p><strong>问题二：为什么二维数组中遍历不需要倒叙？</strong></p><p>因为对于二维数组<code>dp[i][j]</code>,都是由上一状态<code>dp[i-1][j]</code>得来，并不会把本层的<code>dp[i][j]</code>覆盖掉。相当于有一个其他的数组记录了上一时刻的状态。</p></li><li><p><strong>问题三：遍历顺序能互换吗？</strong></p><p><strong>不能！</strong> 因为第二层是倒叙，如果互换后那么每次背包里只会放入一个物品。</p></li></ul></li></ol></blockquote></blockquote><blockquote><blockquote><ol start="5"><li><p><strong>举例推导dp数组</strong></p><table><thead><tr><th align="center">背包容量</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">15</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">20</td><td align="center">35</td></tr><tr><td align="center">物品2</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">20</td><td align="center">35</td></tr></tbody></table></li></ol></blockquote></blockquote><hr><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ZeAndOn</span><span class="params">(<span class="type">int</span>[] w,<span class="type">int</span>[] v,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>];   <span class="comment">//初始化均为0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;w.length;i++)&#123;   <span class="comment">//遍历物品</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=sum;j&gt;=w[i];j--)&#123;    <span class="comment">//遍历背包   为什么逆序？  通过手动推导，发现如果正序会重复计算上一次状态的值</span></span><br><span class="line">                <span class="type">int</span> a=dp[j];</span><br><span class="line">                <span class="type">int</span> b=dp[j-w[i]]+v[i];</span><br><span class="line">                dp[j]=Math.max(a,b);</span><br><span class="line">                System.out.print(dp[j]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*        for(int end:dp)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(end);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>0-1背包问题</title>
      <link href="/2022/06/21/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2022/06/21/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1></blockquote><blockquote><blockquote><p><strong>有N件物品和⼀个最多能被重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i]。每件物品只能⽤⼀次，求解将哪些物品装⼊背包⾥物品价值总和最⼤。</strong></p></blockquote></blockquote><blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><strong>背包最大重量：4</strong></p><table><thead><tr><th align="center"></th><th align="center">重量</th><th align="center">价值</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">1</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">3</td><td align="center">20</td></tr><tr><td align="center">物品2</td><td align="center">4</td><td align="center">30</td></tr></tbody></table></blockquote><p><img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1.png" alt="1"></p><hr><blockquote><h2 id="推导思路"><a href="#推导思路" class="headerlink" title="推导思路"></a>推导思路</h2><blockquote><p><strong>1. 确定DP数组含义</strong><br><strong>dp[i][j]</strong>:从下标为[0-i]的物品中任意取物品，放入容量为j的背包中，价值总和最大为多少。</p></blockquote></blockquote><blockquote><blockquote><p><strong>2. 确定递推公式</strong><br>dp[i][j]主要由两个方向推导而来:</p><ul><li><strong>dp[i-1][j]</strong>:当背包容量为j时，不放物品i时的最大价值，此时dp[i][j]&#x3D;dp[i-1][j]。</li><li><strong>dp[i-1][j-weight[i]]</strong>:当背包容量为j-weight[i]时，不放物品i时的最大价值，此时dp[i][j]&#x3D;dp[i-1][j-weight[i]]+value[i]。</li></ul><p>所以递归公式为：<br><code>dp[i][j]=max(dp[i-1][j],dp[i-1][j-wight[i]]+value[i])</code></p></blockquote></blockquote><blockquote><blockquote><p><strong>3. dp数组初始化</strong></p><ul><li>当背包容量即j&#x3D;0时，dp[i][0]均为0;</li><li>当存放物品0即i&#x3D;0时，各个容量背包可存放的最大物品价值dp[0][j],当<code>j&lt;weight[i]</code>时,dp[0][j]均为<code>0</code>，当<code>j&gt;=weight[i]</code>时,dp[0][j]为<code>value[0]</code>。</li><li>因为其他的下标每次都会被覆盖，都初始化为<code>0</code>就好了。</li></ul></blockquote></blockquote><blockquote><blockquote><p><strong>4. 确定遍历顺序</strong></p><ul><li><p>先遍历物品再遍历背包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// weight数组的⼤⼩ 就是物品个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; weight.size(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= bagWeight; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">     <span class="keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="number">1</span>][j]; <span class="comment">// 这个是为了展现dp数组⾥元素的</span></span><br><span class="line">变化</span><br><span class="line">     <span class="keyword">else</span> dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 先遍历背包再遍历物品：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">// weight数组的⼤⼩ 就是物品个数</span><br><span class="line">for(int j = 0; j &lt;= bagWeight; j++) &#123; // 遍历背包容量</span><br><span class="line"> for(int i = 1; i &lt; weight.size(); i++) &#123; // 遍历物品                </span><br><span class="line">     if (j &lt; weight[i]) dp[i][j] = dp[i - 1][j]        ;</span><br><span class="line">     else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>两种都可以！</strong></p><p>  <strong>为什么？</strong></p><p>  首先要先明白递归顺序，先看递归公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]=max(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-wight[i]]+value[i])</span><br></pre></td></tr></table></figure><p>  可见当先遍历物品再遍历背包时，当前dp[i][j]来自左上方和正上方</p><p>  当先遍历背包再遍历物品时，同样是来自左上方和正上方，不影响当前dp[i][j]。</p><p>  所以遍历顺序在二维数组遍历中都可以，只不过先遍历物品再遍历背包更好理解。</p><p>  <img src="/pictures/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/2.png" alt="2"></p></blockquote></blockquote><blockquote><blockquote><p><strong>5. 举例推导dp数组</strong></p><p>这里我的经验是可以直接用代码打印出每次递归后的dp数组会更直观点，也不用手动推导了，部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">               System.out.print(dp[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"></th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">物品0</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">15</td><td align="center">15</td></tr><tr><td align="center">物品1</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">20</td><td align="center">35</td></tr><tr><td align="center">物品2</td><td align="center">0</td><td align="center">15</td><td align="center">15</td><td align="center">20</td><td align="center">35</td></tr></tbody></table></blockquote></blockquote><hr><blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ZeAndOn</span><span class="params">(<span class="type">int</span>[] w,<span class="type">int</span>[] v,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">       <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[w.length][sum+<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;sum+<span class="number">1</span>;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(j&gt;=w[<span class="number">0</span>])&#123;</span><br><span class="line">               dp[<span class="number">0</span>][j]=v[<span class="number">0</span>];</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               dp[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="comment">//初始化dp数组</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;w.length;i++)&#123;     <span class="comment">//遍历物品</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;sum+<span class="number">1</span>;j++)&#123;    <span class="comment">//遍历背包</span></span><br><span class="line">               <span class="keyword">if</span>(w[i]&gt;j)&#123;</span><br><span class="line">                   dp[i][j]=dp[i-<span class="number">1</span>][j];</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="type">int</span> a=dp[i-<span class="number">1</span>][j];</span><br><span class="line">                   <span class="type">int</span> b=dp[i-<span class="number">1</span>][j-w[i]]+v[i];</span><br><span class="line">                   dp[i][j]=Math.max(a,b);<span class="comment">//递推公式</span></span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node2Vec学习笔记</title>
      <link href="/2022/06/21/Node2vec/"/>
      <url>/2022/06/21/Node2vec/</url>
      
        <content type="html"><![CDATA[<h1 id="Node2vec-Scalable-Feature-Learning-for-Networks"><a href="#Node2vec-Scalable-Feature-Learning-for-Networks" class="headerlink" title="Node2vec:Scalable Feature Learning for Networks"></a><a href="https://dl.acm.org/doi/abs/10.1145/2939672.2939754">Node2vec:Scalable Feature Learning for Networks</a></h1><blockquote><h2 id="论文的研究背景"><a href="#论文的研究背景" class="headerlink" title="论文的研究背景"></a>论文的研究背景</h2><blockquote><h3 id="本论文解决什么问题？（能否通过一个示例来说明拟解决的问题）"><a href="#本论文解决什么问题？（能否通过一个示例来说明拟解决的问题）" class="headerlink" title="本论文解决什么问题？（能否通过一个示例来说明拟解决的问题）"></a>本论文解决什么问题？（能否通过一个示例来说明拟解决的问题）</h3></blockquote></blockquote><p>在复杂网络领域主要有两类任务：网络节点分类和链路预测。在完成这两类问题之前首要解决的任务就是网络节点的嵌入。本篇论文要解决的问题就是如何设计一种既能保持节点邻居信息和体现网络信息而且又容易训练的模型来实现网络嵌入<br>比如将一篇文章构造成的词共现网络中，如果需要实现关键词提取或摘要提取等任务，则需要对该词共现网络进行节点分类以及链路预测，在此之前，首先就需要将该词共现网络中的节点信息向量化，成为词向量，也就是实现节点嵌入，再通过网络的嵌入信息完成更多下游任务。</p><blockquote><blockquote><h3 id="关于该问题，目前的相关工作有哪些？这些相关工作有何优缺点？（综述相关工作）"><a href="#关于该问题，目前的相关工作有哪些？这些相关工作有何优缺点？（综述相关工作）" class="headerlink" title="关于该问题，目前的相关工作有哪些？这些相关工作有何优缺点？（综述相关工作）"></a>关于该问题，目前的相关工作有哪些？这些相关工作有何优缺点？（综述相关工作）</h3></blockquote></blockquote><ul><li>手工提取特征的方式。特征需要依赖人手工定义，所以需要特定领域内专业人士来完成，而且手工提取特征步骤繁琐，对不同任务泛化能力差。</li><li>解优化函数的方式学习网络的表示特征。该方法面临一个计算效率和准确度的平衡问题，无法兼顾两者。</li><li>传统的降维方法（基于线性或非线性的降维技术）。有一定的效果，缺点是会涉及矩阵分解，运算量大，同时准确率也不高，而且有些方法只是针对特定的任务才有效果。</li></ul><blockquote><h2 id="论文的主要研究内容"><a href="#论文的主要研究内容" class="headerlink" title="论文的主要研究内容"></a>论文的主要研究内容</h2><blockquote><h3 id="针对已有工作的不足之处，本文提出了什么方法？（该方法为何有效？）该方法的基本思路是什么？主要创新点在哪？"><a href="#针对已有工作的不足之处，本文提出了什么方法？（该方法为何有效？）该方法的基本思路是什么？主要创新点在哪？" class="headerlink" title="针对已有工作的不足之处，本文提出了什么方法？（该方法为何有效？）该方法的基本思路是什么？主要创新点在哪？"></a>针对已有工作的不足之处，本文提出了什么方法？（该方法为何有效？）该方法的基本思路是什么？主要创新点在哪？</h3></blockquote></blockquote><p><strong>本文针对过去工作的不足之处，主要提出了以下三点优化：</strong></p><ul><li>优化目标函数，给定一个顶点，令其近邻顶点出现的概率最大；</li><li>提出有偏的随机游走路径采样策略；</li><li>使用Alias Sample方法进行顶点采样</li></ul><p>其中第二点，使用有偏的路径采样策略是本篇论文的核心思想，该方法引入两个超参数p和q来控制随机游走的策略。q越小，遍历到远处节点的概率越高，图的遍历越倾向于DFS，同时越趋向于表示图的同质性；p越小，图的遍历越倾向于BFS，越趋向于表示图的结构性。其中随机游走是p&#x3D;1，q&#x3D;1的一种特殊情况。</p><p><strong>本文的创新点主要有以下两点:</strong></p><ul><li>提出一种新的网络节点嵌入算法，其拓展性更好；</li><li>设计了有偏的随机游走算法，通过p，q等超参调节不同的游走情况，使其更加灵活的探索了网络的同质性或者结构性等信息。</li></ul><blockquote><blockquote><h3 id="阐述本文提出方法的技术细节"><a href="#阐述本文提出方法的技术细节" class="headerlink" title="阐述本文提出方法的技术细节"></a>阐述本文提出方法的技术细节</h3></blockquote></blockquote><p><strong>1. 优化目标函数</strong><br>论文将Skip-gram模型扩展到网络中来，优化以下目标函数：<br><img src="/pictures/Node2vec/1.png" alt="1"><br>为了使优化问题更容易处理，文章做了以下两个标准假设：</p><ul><li><strong>条件独立性假设</strong><br>条件独立给定一个顶点，其近邻顶点出现的概率与近邻集合中的其他顶点无关，得到以下公式：<br><img src="/pictures/Node2vec/2.png" alt="2"></li><li><strong>特征空间对称性假设</strong><br>源顶点和近邻顶点在特征空间中具有对称性，不管该顶点是源顶点还是近邻点Embedding表达是一样的，得到以下公式：<br><img src="/pictures/Node2vec/3.png" alt="3"><br>根据以上两个标准假设，原公式最终优化为以下目标函数：<br><img src="/pictures/Node2vec/4.png" alt="4"></li></ul><p><strong>2. 路径采样策略</strong><br>网络结构中存在两种性质，一是同质性，比如u和s1~s4处于同一个社区中，相连的边越少，权重越大，则同质性越强；二是结构性，比如u和s6的关系，它们虽然不接近，但是在彼此的社区中的角色类似，都是扮演中心节点的角色。相对应的，广度优先搜索BFS更适合探索网络的同质性，深度优先搜索DFS更适合探索网络的结构性。如下图所示。<br><img src="/pictures/Node2vec/5.png" alt="5"><br>Node2vec通过对参数的调节，可以在BFS和DFS之间进行权衡，同时探索网络的同质性和结构性。<br>在论文中，设定G&#x3D;（V，E）作为图，其中V为图的节点，E为图的边。对于任意一个节点u∈V，模拟一个长度为l的随机游走。设定ci为随机游走的第i个节点，其中第i个节点ci通过以下概率分布出现：<br><img src="/pictures/Node2vec/6.png" alt="6"><br>其中π_vx节点v和节点x的非归一化转移概率，Z为归一化常数。<br>文章通过设定π_vx&#x3D;α_pq (t,x)*w_vx来调整节点之间的转移概率，其中：<br><img src="/pictures/Node2vec/7.png" alt="7"><br>其中d_tx表示节点t和节点x之间的最短距离，<strong>p为返回参数（Return parameter）</strong>，**q为进出参数(In-out parameter)**。<br>由以上公式可知，q越小，遍历到远处节点的概率越高，图的遍历越倾向于DFS，同时越趋向于表示图的同质性；p越小，节点返回t的概率越大，图的遍历越倾向于BFS，越趋向于表示图的结构性。因此可以设置参数p、q的值来权衡图嵌入表达结果的倾向性。示例如下图所示。<br><img src="/pictures/Node2vec/8.png" alt="8">  </p><blockquote><h2 id="论文的实验结果"><a href="#论文的实验结果" class="headerlink" title="论文的实验结果"></a>论文的实验结果</h2><blockquote><h3 id="阐述本文的实验内容"><a href="#阐述本文的实验内容" class="headerlink" title="阐述本文的实验内容"></a>阐述本文的实验内容</h3></blockquote></blockquote><ul><li><p><strong>实验一:</strong> 将小说《悲惨世界》中的角色构建成含有77个节点和254条边的网络，设置不同的参数，使用Node2vec对图节点进行嵌入，验证Node2vec可以符合网络同质性和结构性的节点嵌入。<br>下图中顶部那副图对应p&#x3D;1,q&#x3D;0.5的情况。即p&#x3D;1,q&#x3D;0.5时算出每个节点的特征表示，然后根据特征表示进行聚类。在这个设置下，Node2vec发现了小说中经常互动的角色集群。<br>为了发现哪些节点具有相同的结构角色，使用相同的网络，设置p&#x3D;1,q&#x3D;2，使用Node2vec获取节点特征，然后根据获得的特征对节点进行聚类，结果如表图3底部所示。蓝色节点代表了小说中不同次要情节之间的桥梁，他们具有相似的结构角色。<br><img src="/pictures/Node2vec/9.png" alt="9">  </p></li><li><p><strong>实验二:</strong> 多标签分类。在多标签分类设置中，每个节点都从有限集L中分配一个或多个标签。在训练阶段，观察一定比例的节点及其所有标签。实验任务是预测剩余节点的标签。实验结果如下图所示，可见在多标签分类任务中Node2vec表现最好。<br>对比算法：Spectral Clustering、Deep Walk、LINE<br>使用的数据集：BlogCatalog(社交博客网站)、Protein-Protein Interactions(PPI)(蛋白质作用网络)、Wikipedia(词共现网络)<br><img src="/pictures/Node2vec/10.png" alt="10"><br><img src="/pictures/Node2vec/15.png" alt="15"> </p></li><li><p><strong>实验三:</strong> 参数灵敏度分析。使用标记数据和未标记数据之间的50-50分割来检查选择不同的参数如何影响Node2vec在BlogCatalog数据集上的性能。由下图可见，Node2vec的性能随着出入参数p和返回参数q的减少而提高，其他参数如d，r，l，k均能一定程度上提升Node2vec的性能，但有上限。<br><img src="/pictures/Node2vec/11.png" alt="11"> </p></li><li><p><strong>实验四:</strong> 扰动分析。文章分析了在信息有所缺失的网络情况下Node2vec的性能。第一种情况是在网络中随机选择缺失边，测试Node2vec随着网络中缺失边数量的增加性能的变化情况。第二种情况是在网络中随机选择节点对之间的噪声边缘，测试Node2vec随着网络中噪声边的增加性能的变化情况。如下图可见，随着数据集中缺失边越来越多，性能是越来越差的，但是总体来说下降斜率比较平缓；随着噪声越多，性能越差，但其下降速率在不断变慢。<br><img src="/pictures/Node2vec/12.png" alt="12"> </p></li><li><p><strong>实验五:</strong> 可扩展性分析。使用Node2vec学习节点表示，将Node2vec用于Erdos-Renyi图，设置Erdos-Renyi图的默认参数值从100增加到1000000个节点，平均度数为10，测试Node2vec的可扩展性。如下图可见，图的节点从100个增加到1000000个，Node2vec的时间复杂度在线性增加。<br><img src="/pictures/Node2vec/13.png" alt="13"> </p></li><li><p><strong>实验六:</strong> 链路预测。在链接预测中，文章使用一个删除了部分边的网络，并且预测这些丢失的边。文章按如下方式生成带标签的边的数据集：为了生成正样本，从网络中移除50%随机选择的边，同时确保在移除边后获得的剩余网络是连接的；为了生成负样本，从网络中随机抽取相同数量的节点对，这些节点对没有相互连接的边。由于之前没有将任何特征学习算法用于链路预测，因此文章还根据一些在链接预测中取得良好性能的流行启发式分数来评估Node2vec。如下图可见，Node2vec在arXiv数据集上取得了最好效果，相比于启发式方法中最好的Adamic-Adar提高了12.6%，并且Node2vec在所有网络中都优于DeepWalk和LINE。<br><img src="/pictures/Node2vec/14.png" alt="14"></p></li></ul><blockquote><blockquote><h3 id="本文方法的有效性是如何通过实验进行验证的？"><a href="#本文方法的有效性是如何通过实验进行验证的？" class="headerlink" title="本文方法的有效性是如何通过实验进行验证的？"></a>本文方法的有效性是如何通过实验进行验证的？</h3></blockquote></blockquote><p>在实验二多标签分类和实验六链路预测中，论文选取了三个比较主流的节点嵌入算法在三个不同领域的大型数据集上进行实验对比，在相同的实验条件下，均可得出Node2vec算法相较于其他算法的优越性。除此之外，论文还测试了不同参数对Node2vec算法的影响，并且考虑到网络本身的情况，比如缺失边以及噪声边的情况下，Node2vec的效能变化。总之在一系列的实验下，通过对比Node2vec相较于其他算法的优势以及对Node2vec本身结构的实验研究，十分全面的说明了Node2vec的有效性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown学习</title>
      <link href="/2022/06/17/MarkDown/"/>
      <url>/2022/06/17/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="#一级标题"></a>#一级标题</h1><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一级标题分割线</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="##二级标题"></a>##二级标题</h2><hr><hr><p>-——————二级标题分割线</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="###三级标题"></a>###三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="####四级标题"></a>####四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="#####五级标题"></a>#####五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="######六级标题"></a>######六级标题</h6><hr><p><em>*斜体文本*</em><br><em>_斜体文本_</em></p><hr><p><strong>**粗体文本**</strong><br><strong>__粗体文本__</strong></p><hr><p><em><strong>***斜粗体文本***</strong></em><br><em><strong>___斜粗体文本___</strong></em></p><hr><p>~~~~删除线~~~~<br><u>&lt;u&gt;下划线&lt;&#x2F;u&gt;</u></p><hr><p>这是脚注[^foot]<br><img src="/pictures/%E8%84%9A%E6%B3%A8.png" alt="脚注" title="脚注"><br>[^foot]:脚注</p><hr><p>###无序列表</p><ul><li>+ 第一项，+号后面要加空格</li></ul><ul><li>* 第二项，要加空格</li></ul><ul><li>- 第三项，要加空格，+,-,*都可以</li></ul><p>###有序列表</p><ol><li>第一项</li><li>第二项</li><li>第三项，要加空格</li></ol><p>###嵌套列表</p><ol><li><p>1</p><ul><li>1.1</li><li>1.2</li><li>1.3</li></ul></li><li><p>2</p><ul><li>2.1</li></ul><ul><li>2.2</li></ul><ul><li>二级列表加四个空格</li></ul><hr><blockquote><p>&gt;最外层嵌套</p><blockquote><p>&gt;&gt;第一层嵌套</p><blockquote><p>&gt;&gt;&gt;第二层嵌套</p><blockquote><p>&gt;&gt;&gt;&gt;第三层嵌套</p></blockquote></blockquote></blockquote></blockquote><ul><li>*列表加嵌套<br>&gt;最外层 (加四个空格缩进或一个tab键)</li></ul></li></ol><hr><p> <code>print()</code>函数</p><p> 代码函数或者片段使用反引号 &#96;&#96; 将代码包起来</p><pre><code>    public static Boolean equal(int[] nums)&#123;    int sum=0;    for(int s:nums)&#123;        sum=sum+s;    &#125;    if(sum%2!=0)&#123;        return false;    &#125;    int sum2=sum/2;    int[] dp=new int[sum2+1];    for(int i=0;i&lt;nums.length;i++)&#123;        for(int j=sum2;j&gt;=nums[i];j--)&#123;            int a=dp[j];            int b=dp[j-nums[i]]+nums[i];            dp[j]=Math.max(a,b);            if(dp[j]==sum2)&#123;                return true;            &#125;        &#125;    &#125;    return false;&#125;</code></pre><p>代码块可以给一个tab键然后开始放入代码块<br>或者三个反引号 ```    ```</p><hr><p>这是一个<a href="https://www.baidu.com/">链接</a><br>格式：<br>[ 链接名称 ]  (链接地址)</p><p><a href="https://www.baidu.com/">https://www.baidu.com</a><br>&lt;直接使用链接地址&gt;</p><hr><p>###放图片<br><img src="/pictures/au3.png" alt="C型" title="C"></p><p>![图片的代替文字]（图片url “图片标题”）</p><p><img src="/pictures/au3.png" width="70%" height="70%"></img><br>可以使用 &lt;</template>img src&#x3D;”url” width&#x3D;”” height&#x3D;”” &gt;方式指定图片大小</p><hr><p>###表格</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>勇士总冠军！库里FMVP！</title>
      <link href="/2022/06/17/FMVP/"/>
      <url>/2022/06/17/FMVP/</url>
      
        <content type="html"><![CDATA[<p><img src="/pictures/FMVP1.jpg" alt="FMVP1" title="FMVP1"><br><img src="/pictures/FMVP2.jpg" alt="FMVP2" title="FMVP2"><br><img src="/pictures/FMVP3.jpg" alt="FMVP3" title="FMVP3"><br><img src="/pictures/FMVP4.jpg" alt="FMVP4" title="FMVP4"><br><img src="/pictures/FMVP5.jpg" alt="FMVP5" title="FMVP5"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>来自M78星云的光之巨人的传说</title>
      <link href="/2022/05/13/%E5%A5%A5%E7%89%B9%E6%9B%BC/"/>
      <url>/2022/05/13/%E5%A5%A5%E7%89%B9%E6%9B%BC/</url>
      
        <content type="html"><![CDATA[<p><strong>他是来自M78星云的光之巨人，为了追捕逃亡的宇宙怪兽百慕拉而来到地球。在龙森湖上空追击百慕拉时，他不慎与科学特别搜查队队员早田进所乘的战斗机相撞，导致早田坠机死亡。为了弥补自己的过失、以及挽救早田进的生命，奥特曼将自己的生命给予了早田，与之一心同体使其复活。之后，奥特曼与早田一起，为保卫地球而与众多凶暴的怪兽和邪恶的宇宙人展开了激烈的战斗。</strong></p><blockquote><h2 id="奥特曼的三种形态"><a href="#奥特曼的三种形态" class="headerlink" title="奥特曼的三种形态"></a>奥特曼的三种形态</h2></blockquote><blockquote><blockquote><h3 id="A型"><a href="#A型" class="headerlink" title="A型"></a>A型</h3></blockquote></blockquote><p><strong>奥特曼的初始皮套，由潜水服改造而来。第一代面具为了体现奥特曼嘴部的活动，而用合成橡胶裹在了面罩上使得演员能活动嘴巴。但后来圆谷认识到即使做了这些努力嘴部活动效果依然不明显还会导致面部变的凹凸不平，因此之后的面罩不再采用A型的制作方法。</strong><br><strong>在2006年剧场版《梦比优斯·奥特曼与奥特兄弟》和2008年的《大决战！超奥特8兄弟》中，出于情怀致敬的目的，特地让奥特曼以A型脸的形象登场。</strong></p><blockquote><blockquote><h4 id="具体特征"><a href="#具体特征" class="headerlink" title="具体特征"></a>具体特征</h4></blockquote></blockquote><ol><li>脸部崩坏</li><li>嘴部能够轻微地张开</li><li>基本上看不出胸肌</li><li>足部脚尖微微上翘</li></ol><blockquote><blockquote><h4 id="TV登场时段：第1话-第13话"><a href="#TV登场时段：第1话-第13话" class="headerlink" title="TV登场时段：第1话~第13话"></a>TV登场时段：第1话~第13话</h4></blockquote></blockquote><p><img src="/pictures/au1.png" alt="A" title="A"></p><blockquote><blockquote><h3 id="B型"><a href="#B型" class="headerlink" title="B型"></a>B型</h3></blockquote></blockquote><p><strong>这个皮套是因为A型皮套老化严重所以才被制作出来的，各方面（面部，胸前等）十分紧凑。B型皮套于1970年失窃，而并非在拍摄途中丢失。</strong><br><strong>在2009年剧场版《宇宙英雄之超银河传说》中，出于情怀致敬的目的，以及和佐菲、杰克等奥特战士作区分，特地让奥特曼再度以B型脸的形象登场出现。</strong></p><blockquote><blockquote><h4 id="具体特征："><a href="#具体特征：" class="headerlink" title="具体特征："></a>具体特征：</h4></blockquote></blockquote><ol><li>嘴型在三种皮套设计中最小</li><li>身上的花纹比较紧凑</li><li>足尖上翘很厉害</li></ol><blockquote><blockquote><h4 id="TV登场时段：第14话-第29话"><a href="#TV登场时段：第14话-第29话" class="headerlink" title="TV登场时段：第14话~第29话"></a>TV登场时段：第14话~第29话</h4></blockquote></blockquote><p><img src="/pictures/au2.png" alt="B" title="B"></p><blockquote><blockquote><h3 id="C型"><a href="#C型" class="headerlink" title="C型"></a>C型</h3></blockquote></blockquote><p><strong>作为奥特曼标准形象的C型，此皮套被制作出来的理由并非是因为B型皮套失窃（B型皮套失窃的时间点并不是在拍摄期间），而是为了改进B型的形象。奥特曼在后续的奥特系列作品中登场时，使用最多的也是C型脸形象。</strong></p><blockquote><blockquote><h4 id="具体特征：-1"><a href="#具体特征：-1" class="headerlink" title="具体特征："></a>具体特征：</h4></blockquote></blockquote><ol><li>身上的花纹结合了A型和B型的优点</li><li>胸肌十分的突出</li><li>足尖无上翘</li></ol><blockquote><blockquote><h4 id="TV登场时段：第30话-第39话"><a href="#TV登场时段：第30话-第39话" class="headerlink" title="TV登场时段：第30话~第39话"></a>TV登场时段：第30话~第39话</h4></blockquote></blockquote><p><img src="/pictures/au3.png" alt="C" title="C"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
